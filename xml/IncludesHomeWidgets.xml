<?xml version="1.0" encoding="utf-8"?>
<includes>
    <include name="HorizontalWidgets">
        <!-- infopanel -->
        <control type="group" id="77551">
            <top>0</top>
            <left>0</left>
            <height>490</height>
            <width>100%</width>
            <visible>![String.Contains(Window.Property(widgetstyle), box) | String.Contains(Window.Property(widgetstyle), details)] + !String.IsEmpty(Window(home).Property(HomeFirstLoadDone))</visible>
            <visible>Control.HasFocus(77777) | String.IsEqual(Window(Home).Property(ShowWidget),show)</visible>
            <visible>!Skin.HasSetting(HideWidgetDetailsPanel)</visible>
            <animation type="Visible">
                <effect type="slide" start="0,-1000" end="0,0" time="300" tween="cubic" easing="inout" delay="0"/>
            </animation>
            <animation type="Hidden">
                <effect type="slide" start="0,0" end="0,-1000" time="300" tween="cubic" easing="inout" delay="0"/>
            </animation>
            <control type="image">
                <height>1000</height>
                <top>-450</top>
                <texture border="15">diffuse/bgpanel.png</texture>
                <colordiffuse>$VAR[ViewDetailsPanelColor]</colordiffuse>
                <aspectratio>stretch</aspectratio>
                <visible>!Skin.HasSetting(HideWidgetPanelBackground)</visible>
                <!-- slide widget background panel matching the widget style -->
                <animation type="Conditional" condition="String.IsEqual(Window.Property(widgetstyle), poster)">
                    <effect type="slide" start="0,0" end="0,380" time="0" delay="0"/>
                </animation>
                <animation type="Conditional" condition="String.IsEqual(Window.Property(widgetstyle), posterdetails)">
                    <effect type="slide" start="0,0" end="0,380" time="0" delay="0"/>
                </animation>
                <animation type="Conditional" condition="String.IsEqual(Window.Property(widgetstyle), smallposter)">
                    <effect type="slide" start="0,0" end="0,253" time="0" delay="0"/>
                </animation>
                <animation type="Conditional" condition="String.IsEqual(Window.Property(widgetstyle), square)">
                    <effect type="slide" start="0,0" end="0,245" time="0" delay="0"/>
                </animation>
                <animation type="Conditional" condition="String.IsEqual(Window.Property(widgetstyle), minisquare)">
                    <effect type="slide" start="0,0" end="0,131" time="0" delay="0"/>
                </animation>
                <animation type="Conditional" condition="String.IsEqual(Window.Property(widgetstyle), landscape)">
                    <effect type="slide" start="0,0" end="0,210" time="0" delay="0"/>
                </animation>
                <animation type="Conditional" condition="String.IsEqual(Window.Property(widgetstyle), banner)">
                    <effect type="slide" start="0,0" end="0,146" time="0" delay="0"/>
                </animation>
                <animation type="Conditional" condition="String.IsEqual(Window.Property(widgetstyle), landscapesmall)">
                    <effect type="slide" start="0,0" end="0,148" time="0" delay="0"/>
                </animation>
                <animation type="Conditional" condition="String.IsEqual(Window.Property(widgetstyle), landscapelarge)">
                    <effect type="slide" start="0,0" end="0,270" time="0" delay="0"/>
                </animation>
                <animation type="Conditional" condition="String.IsEqual(Window.Property(widgetstyle), landscapedetails)">
                    <effect type="slide" start="0,0" end="0,210" time="0" delay="0"/>
                </animation>
            </control>
            <control type="label">
                <posx>405</posx>
                <top>25</top>
                <width>1465</width>
                <height>50</height>
                <font>Bold45</font>
                <align>left</align>
                <aligny>top</aligny>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <shadowcolor>$INFO[Skin.String(ViewDetailsTextShadowColor)]</shadowcolor>
                <label>$VAR[HomeMenuWidgetInfoLabel]</label>
            </control>
            <control type="textbox">
                <width>1455</width>
                <posx>405</posx>
                <top>95</top>
                <height>200</height>
                <label>$VAR[HomeMenuWidgetInfoPlotAlt]</label>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <shadowcolor>$INFO[Skin.String(ViewDetailsTextShadowColor)]</shadowcolor>
                <align>justify</align>
                <font>Light28</font>
            </control>
            <control type="image">
                <left>50</left>
                <top>30</top>
                <width>340</width>
                <height>430</height>
                <aspectratio align="left" aligny="top">keep</aspectratio>
                <fadetime>250</fadetime>
                <texture background="true" diffuse="diffuse/poster.png">$VAR[HomeMenuWidgetInfoPoster]</texture>
            </control>
            <!-- flags -->
            <control type="group">
                <height>60</height>
                <posx>405</posx>
                <bottom>0</bottom>
                <include>mediaflags</include>
            </control>
        </control>
        <!-- tagline or clearlogo at bottom -->
        <control type="group" id="77552">
            <visible>!Skin.HasSetting(EnableTouchSupport)</visible>
            
            <control type="fadelabel">
                <left></left>
                <bottom>0</bottom>
                <width>100%</width>
                <height>100</height>
                <font>Bold45</font>
                <align>center</align>
                <textcolor>$INFO[Skin.String(GeneralTextColor)]</textcolor>
                <shadowcolor>black</shadowcolor>
                <label>$VAR[HomeMenuWidgetInfoLabel2]</label>
                <scroll>true</scroll>
                <scrollout>true</scrollout>
                <pauseatend>0</pauseatend>
                <visible>String.IsEmpty(Control.GetLabel(8821))</visible>
                <animation time="300" effect="fade" delay="500">Visible</animation>
                <animation time="200" effect="fade" delay="0">Hidden</animation>
                <visible>Control.IsVisible(77551)</visible>
            </control>
            <control type="image" id="8821">
                <width>100%</width>
                <bottom>20</bottom>
                <height>90</height>
                <aspectratio align="center" aligny="bottom">keep</aspectratio>
                <texture background="true">$VAR[HomeMenuWidgetInfoclearlogo]</texture>
                <animation time="300" effect="fade" delay="500">Visible</animation>
                <animation time="200" effect="fade" delay="0">Hidden</animation>
                <visible>Control.IsVisible(77551)</visible>
            </control>
        </control>
            
        <!-- widgets -->
        <control type="grouplist" id="77777">
            <left>50</left>
            <right>50</right>
            <top>500</top>
            <bottom>0</bottom>
            <orientation>vertical</orientation>
            <onup>300</onup>
            <onup>ClearProperty(ShowWidget, Home)</onup>
            <ondown>300</ondown>
            <ondown>ClearProperty(ShowWidget, Home)</ondown>
            <onback>300</onback>
            <onback>ClearProperty(ShowWidget, Home)</onback>
            <itemgap>0</itemgap>
            <visible>!String.IsEmpty(Window(Home).Property(HomeFirstLoadDone))</visible>
            <visible>![[String.Contains(Window(Home).Property(submenu),show) | Control.HasFocus(4444)] + Skin.String(SubmenuLayout, subpage)]</visible>
            
            <!-- hide when no focus on widget and autoshow not enabled -->
            <animation effect="slide" start="0,0" end="0,-1000" time="300" tween="cubic" easing="inout" delay="0" condition="!String.IsEqual(Window(Home).Property(ShowWidget),show) + !Skin.HasSetting(AutoShowWidgets)">Conditional</animation>
            <animation effect="slide" start="0,-1000" end="0,0" time="300" tween="cubic" easing="inout" delay="0" condition="String.IsEqual(Window(Home).Property(ShowWidget),show) + !Skin.HasSetting(AutoShowWidgets)">Conditional</animation>
            
            
            <!-- positioning for boxed layouts without infopanel -->
            <animation effect="slide" delay="0" start="0" end="0,175" time="0" condition="String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),widebox) + String.Contains(Skin.String(HomeLayout),horizontal) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,90" time="0" condition="String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),singlebox) + String.Contains(Skin.String(HomeLayout),horizontal) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,220" time="0" condition="String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),landscapedetails) + String.Contains(Skin.String(HomeLayout),horizontal) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,50" time="0" condition="String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),posterdetails) + String.Contains(Skin.String(HomeLayout),horizontal) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            
            <animation effect="slide" delay="0" start="0" end="0,-45" time="0" condition="String.IsEqual(Window.Property(widgetstyle),widebox) + String.Contains(Skin.String(HomeLayout),simplehor) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,-130" time="0" condition="String.IsEqual(Window.Property(widgetstyle),singlebox) + String.Contains(Skin.String(HomeLayout),simplehor) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,0" time="0" condition="String.IsEqual(Window.Property(widgetstyle),landscapedetails) + String.Contains(Skin.String(HomeLayout),simplehor) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,-170" time="0" condition="String.IsEqual(Window.Property(widgetstyle),posterdetails) + String.Contains(Skin.String(HomeLayout),simplehor) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,-370" time="0" condition="String.IsEqual(Window.Property(widgetstyle),posterdetails) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            
            <animation effect="slide" delay="0" start="0" end="0,-300" time="0" condition="!String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),posterdetails) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,-180" time="0" condition="String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),posterdetails) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            
            <animation effect="slide" delay="0" start="0" end="0,-370" time="0" condition="String.IsEqual(Window.Property(widgetstyle),landscapedetails) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,-130" time="0" condition="!String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),landscapedetails) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,-10" time="0" condition="String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),landscapedetails) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            
            <animation effect="slide" delay="0" start="0" end="0,-370" time="0" condition="String.IsEqual(Window.Property(widgetstyle),singlebox) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,-260" time="0" condition="!String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),singlebox) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,-140" time="0" condition="String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),singlebox) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            
            <animation effect="slide" delay="0" start="0" end="0,-370" time="0" condition="String.IsEqual(Window.Property(widgetstyle),widebox) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,-175" time="0" condition="!String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),widebox) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <animation effect="slide" delay="0" start="0" end="0,-55" time="0" condition="String.IsEqual(Skin.AspectRatio,16:10) + String.IsEqual(Window.Property(widgetstyle),widebox) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>

            
            <include>skinshortcuts-template-Widgets</include>
        </control>
    </include>
    
    <include name="widget_layout_default">
        <include content="widget_layout_poster" condition="Skin.String(widgetstyle,poster)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_landscape" condition="Skin.String(widgetstyle,landscape)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_landscapesmall" condition="Skin.String(widgetstyle,landscapesmall)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_singlebox" condition="Skin.String(widgetstyle,single box) | Skin.String(widgetstyle,singlebox)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_widebox" condition="Skin.String(widgetstyle,wide box) | Skin.String(widgetstyle,widebox)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_smallposter" condition="Skin.String(widgetstyle,small poster) | Skin.String(widgetstyle,smallposter)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_square" condition="Skin.String(widgetstyle,square)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_minisquare" condition="Skin.String(widgetstyle,minisquare)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_banner" condition="Skin.String(widgetstyle,banner)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_landscapelarge" condition="Skin.String(widgetstyle,landscapelarge)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_landscapedetails" condition="Skin.String(widgetstyle,landscapedetails)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_layout_posterdetails" condition="Skin.String(widgetstyle,posterdetails)">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
    </include>
    <include name="widget_layout_None">
        <include content="widget_layout_default">
            <param name="widgetid" value="$PARAM[widgetid]"/>
            <param name="widgetTags" value="$PARAM[widgetTags]"/>
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
    </include>
    
    <!-- widget poster layout -->
    <include name="widget_layout_poster">
        <include condition="$PARAM[multiRows]">widget_layout_poster_multi</include>
        <height>380</height>
        
        <animation effect="slide" delay="0" start="0" end="0,-70" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,50" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-170" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-410" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-300" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-180" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        <animation effect="slide" start="0" end="140" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + Skin.HasSetting(VerticalHomeLargeWidget) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        <animation effect="slide" start="0" end="261" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,6) + !String.Contains(Skin.String(HomeLayout),ver)">Conditional</animation>
        <animation effect="slide" start="0" end="261" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,5) + !String.Contains(Skin.String(HomeLayout),ver)">Conditional</animation>
        <animation effect="slide" start="0" end="261" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        <animation effect="slide" start="0" end="261" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,3)">Conditional</animation>
        <animation effect="slide" start="0" end="261" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,2)">Conditional</animation>
        <animation effect="slide" start="0" end="261" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,1)">Conditional</animation>
        <itemlayout height="380" width="261">
            <control type="group">
                <width>250</width>
                <height>370</height>
                <include>PosterPanelLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">PosterTagOverlay</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Poster"/>
                    </include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
                </control>
            </control>
        </itemlayout>
        <focusedlayout height="380" width="261" condition="!Control.HasFocus($PARAM[widgetid])">
            <control type="group">
                <width>250</width>
                <height>370</height>
                <include>PosterPanelLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">PosterTagOverlay</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Poster"/>
                    </include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
                </control>
            </control>
        </focusedlayout>
        <focusedlayout height="380" width="261" condition="Control.HasFocus($PARAM[widgetid])">
            <control type="group">
                <width>250</width>
                <height>370</height>
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <include>PosterPanelLayoutFocus</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">PosterTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Poster"/>
                    </include>
                </control>
                <include name="HiddenWidgetButton" content="HiddenWidgetButton">
                    <param name="widgetstyle" value="poster"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
    </include>
    <include name="widget_layout_poster_multi">
        <height>760</height>
    </include>
    
    <!-- widget poster details layout -->
    <include name="widget_layout_posterdetails">
        
        <animation effect="slide" delay="0" start="0" end="0,-70" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,50" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-170" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-300" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-180" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        
        <height>380</height>
        <orientation>horizontal</orientation>
        <itemlayout height="380" width="261">
          <control type="group">
            <width>250</width>
            <height>370</height>
            <include>PosterPanelLayout</include>
            <control type="group">
                <description>widget label overlay</description>
                <include condition="!Skin.String(Widgets_DisplayTags,disable)">PosterTagOverlay</include>
                <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                    <param name="prefix" value="Poster" />
                </include>
                <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
            </control>
          </control>
        </itemlayout>
        <focusedlayout height="380" width="261" condition="!Control.HasFocus($PARAM[widgetid])">
          <control type="group">
            <width>250</width>
            <height>370</height>
            <include>PosterPanelLayout</include>
            <control type="group">
                <description>widget label overlay</description>
                <include condition="!Skin.String(Widgets_DisplayTags,disable)">PosterTagOverlay</include>
                <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
                <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                    <param name="prefix" value="Poster" />
                </include>
            </control>
            <include content="HiddenWidgetButton">
                <param name="widgetstyle" value="posterdetails" />
                <param name="widgetid" value="$PARAM[widgetid]" />
            </include>
          </control>
        </focusedlayout>
        <focusedlayout width="780" height="380" condition="Control.HasFocus($PARAM[widgetid])">
            <include content="widget_layout_posterdetails_widebox">
                <param name="widgetid" value="$PARAM[widgetid]" />
            </include>
            <include content="HiddenWidgetButton">
                <param name="widgetstyle" value="posterdetails" />
                <param name="widgetid" value="$PARAM[widgetid]" />
            </include>
        </focusedlayout>
	</include>
    <include name="widget_layout_posterdetails_widebox">
        <!-- wide box widget -->
        <control type="group">

            <control type="image">
                <texture border="5">diffuse/panel.png</texture>
                <colordiffuse>$INFO[Skin.String(ViewDetailsPanelColor)]</colordiffuse>
            </control>
            <control type="image">
                <texture border="5">diffuse/thinborder.png</texture>
                <colordiffuse>$INFO[Skin.String(ViewDetailsFocusColor)]</colordiffuse>
            </control>
            <!-- poster image -->
            <control type="group">
                <width>250</width>
                <height>370</height>
                <include>PosterPanelLayout</include>
              </control>
            <control type="textbox">
                <left>260</left>
                <right>30</right>
                <top>8</top>
                <aligny>top</aligny>
                <height>40</height>
                <font>Reg30</font>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <label>$VAR[HomeMenuWidgetInfoLabel]</label>
            </control>
            <control type="textbox">
                <left>260</left>
                <right>30</right>
                <top>50</top>
                <bottom>20</bottom>
                <font>Reg24</font>
                <align>justify</align>
                <autoscroll delay="4000" time="3000" repeat="10000" condition="!Control.HasFocus(510) + !Skin.HasSetting(DisablePlotAutoScroll)" />
                <autoscroll delay="4000" time="3000" repeat="10000" condition="Control.HasFocus(510) + !Skin.HasSetting(DisablePlotAutoScroll)" />
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <label>$VAR[HomeMenuWidgetInfoPlotAlt]</label>
            </control>
        </control>
    
    </include>
    
    <!-- widget small poster layout -->
    <include name="widget_layout_smallposter">
        <include condition="$PARAM[multiRows]">widget_layout_smallposter_multi</include>
        <height>253</height>
        
        <animation effect="slide" delay="0" start="0" end="0,57" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,177" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-43" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-173" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-53" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        
        <itemlayout height="253" width="182" condition="!String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <width>162</width>
                <height>240</height>
                <include>SmallPosterPanelLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">SmallPosterTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Poster"/>
                    </include>
                </control>
            </control>
        </itemlayout>
        <focusedlayout height="253" width="182" condition="!String.Contains(Skin.String(HomeLayout),ver) + !Control.HasFocus($PARAM[widgetid])">
            <control type="group">
                <width>162</width>
                <height>240</height>
                <include>SmallPosterPanelLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">SmallPosterTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Poster"/>
                    </include>
                </control>
            </control>
        </focusedlayout>
        <focusedlayout height="253" width="182" condition="!String.Contains(Skin.String(HomeLayout),ver) + Control.HasFocus($PARAM[widgetid])">
            <control type="group">
                <width>162</width>
                <height>240</height>
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <include>SmallPosterPanelLayoutFocus</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">SmallPosterTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Poster"/>
                    </include>
                </control>
                <include name="HiddenWidgetButton" content="HiddenWidgetButton">
                    <param name="widgetstyle" value="smallposter"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
        
        <itemlayout height="253" width="162" condition="String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <width>162</width>
                <height>240</height>
                <include>SmallPosterPanelLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">SmallPosterTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Poster"/>
                    </include>
                </control>
            </control>
        </itemlayout>
        <focusedlayout height="253" width="162" condition="String.Contains(Skin.String(HomeLayout),ver) + !Control.HasFocus($PARAM[widgetid])">
            <control type="group">
                <width>162</width>
                <height>240</height>
                <include>SmallPosterPanelLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">SmallPosterTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Poster"/>
                    </include>
                </control>
            </control>
        </focusedlayout>
        <focusedlayout height="253" width="162" condition="String.Contains(Skin.String(HomeLayout),ver) + Control.HasFocus($PARAM[widgetid])">
            <control type="group">
                <width>162</width>
                <height>240</height>
                <include>SmallPosterPanelLayoutFocus</include>
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">SmallPosterTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">PosterTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Poster"/>
                    </include>
                </control>
                <include name="HiddenWidgetButton" content="HiddenWidgetButton">
                    <param name="widgetstyle" value="smallposter"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
        
        <animation effect="slide" start="0" end="140" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + Skin.HasSetting(VerticalHomeLargeWidget) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,7)">Conditional</animation>
        
        <animation effect="slide" start="0" end="182" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,9)">Conditional</animation>
        <animation effect="slide" start="0" end="182" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,8)">Conditional</animation>
        <animation effect="slide" start="0" end="182" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,7)">Conditional</animation>
        <animation effect="slide" start="0" end="182" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,6)">Conditional</animation>
        <animation effect="slide" start="0" end="182" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,5)">Conditional</animation>
        <animation effect="slide" start="0" end="182" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        <animation effect="slide" start="0" end="182" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,3)">Conditional</animation>
        <animation effect="slide" start="0" end="182" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,2)">Conditional</animation>
        <animation effect="slide" start="0" end="182" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,1)">Conditional</animation>
        <animation effect="slide" start="0" end="162" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,7)">Conditional</animation>
        
        <animation effect="slide" start="0" end="162" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,6)">Conditional</animation>
        <animation effect="slide" start="0" end="162" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,5)">Conditional</animation>
        <animation effect="slide" start="0" end="162" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        <animation effect="slide" start="0" end="162" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,3)">Conditional</animation>
        <animation effect="slide" start="0" end="162" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,2)">Conditional</animation>
        <animation effect="slide" start="0" end="162" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,1)">Conditional</animation>
    </include>
    <include name="widget_layout_smallposter_multi">
        <include condition="String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)" name="height" content="height">
            <param name="height" value="1012" />
        </include>
        <include condition="![String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)]" name="height" content="height">
            <param name="height" value="759" />
        </include>
    </include>
    
    <!-- widget square layout -->
    <include name="widget_layout_square">
        <include condition="$PARAM[multiRows]">widget_layout_square_multi</include>
        <height>263</height>
        
        <animation effect="slide" delay="0" start="0" end="0,65" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,185" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-35" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-165" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-45" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>


        <animation effect="slide" start="0" end="140" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + Skin.HasSetting(VerticalHomeLargeWidget) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,6) + !String.Contains(Skin.String(HomeLayout),ver)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,5) + !String.Contains(Skin.String(HomeLayout),ver)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) +  !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,3)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,2)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,1)">Conditional</animation>
        <itemlayout height="263" width="262">
            <control type="group">
                <width>240</width>
                <height>240</height>
                <include>SquarePosterPanelLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">SquarePosterTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">SquarePosterTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="SquarePoster"/>
                    </include>
                </control>
            </control>
        </itemlayout>
        <focusedlayout height="263" width="262">
            <control type="group">
                <width>240</width>
                <height>240</height>
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <include>SquarePosterPanelLayoutFocus</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">SquarePosterTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">SquarePosterTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="SquarePoster"/>
                    </include>
                </control>
                <include name="HiddenWidgetButton" content="HiddenWidgetButton">
                    <param name="widgetstyle" value="square"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
    </include>
    <include name="widget_layout_square_multi">
        <include condition="String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)" name="height" content="height">
            <param name="height" value="1052" />
        </include>
        <include condition="![String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)]" name="height" content="height">
            <param name="height" value="789" />
        </include>
    </include>

    <!-- widget minisquare layout -->
    <include name="widget_layout_minisquare">
        <include condition="$PARAM[multiRows]">widget_layout_minisquare_multi</include>
        <height>131</height>
        
        <animation effect="slide" delay="0" start="0" end="0,180" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,300" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,79" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-51" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,69" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        
        
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,13) + !String.Contains(Skin.String(HomeLayout),ver)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,12) + !String.Contains(Skin.String(HomeLayout),ver)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,11) + !String.Contains(Skin.String(HomeLayout),ver)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,10) + !String.Contains(Skin.String(HomeLayout),ver)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,9)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,8)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,7)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,6)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,5)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,3)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,2)">Conditional</animation>
        <animation effect="slide" start="0" end="130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,1)">Conditional</animation>
        <itemlayout height="131" width="130">
            <control type="group">
                <width>120</width>
                <height>120</height>
                <include>SquarePosterPanelLayout</include>
            </control>
        </itemlayout>
        <focusedlayout height="131" width="130">
            <control type="group">
                <width>120</width>
                <height>120</height>
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <include>SquarePosterPanelLayoutFocus</include>
                <include content="HiddenWidgetButton">
                    <param name="widgetstyle" value="minisquare"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
    </include>
    <include name="widget_layout_minisquare_multi">
        <height>786</height>
    </include>

    <!-- widget landscape layout -->
    <include name="widget_layout_landscape">
        <include condition="$PARAM[multiRows]">widget_layout_landscape_multi</include>
        <include condition="String.Contains(Skin.String(HomeLayout),ver)" name="height" content="height">
            <param name="height" value="190" />
        </include>
        <include condition="!String.Contains(Skin.String(HomeLayout),ver)" name="height" content="height">
            <param name="height" value="210" />
        </include>

        <animation effect="slide" delay="0" start="0" end="0,100" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,220" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,0" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-130" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-10" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        
        <animation effect="slide" start="0" end="140" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + Skin.HasSetting(VerticalHomeLargeWidget) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,3)">Conditional</animation>
        
        <animation effect="slide" start="0" end="366" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        <animation effect="slide" start="0" end="366" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,3)">Conditional</animation>
        <animation effect="slide" start="0" end="366" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,2)">Conditional</animation>
        <animation effect="slide" start="0" end="366" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,1)">Conditional</animation>
        <animation effect="slide" start="0" end="326" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,3)">Conditional</animation>
        <animation effect="slide" start="0" end="326" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,2)">Conditional</animation>
        <animation effect="slide" start="0" end="326" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,1)">Conditional</animation>
        
        <itemlayout width="366" height="210" condition="!String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <width>354</width>
                <height>200</height>
                <include>ThumbsViewLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape"/>
                    </include>
                </control>
            </control>
        </itemlayout>
        <focusedlayout width="366" height="210" condition="!String.Contains(Skin.String(HomeLayout),ver) + !  Control.HasFocus($PARAM[widgetid])">
            <control type="group">
                <width>354</width>
                <height>200</height>
                <include>ThumbsViewLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape"/>
                    </include>
                </control>
            </control>
        </focusedlayout>
        <focusedlayout width="366" height="210" condition="!String.Contains(Skin.String(HomeLayout),ver) + Control.HasFocus($PARAM[widgetid])">
            <control type="group">
                <width>354</width>
                <height>200</height>
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <include>ThumbsViewLayoutFocus</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape"/>
                    </include>
                </control>
                <include content="HiddenWidgetButton">
                    <param name="widgetstyle" value="landscape"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
        <itemlayout width="326" height="190" condition="String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <width>320</width>
                <height>180</height>
                <include>ThumbsViewLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape"/>
                    </include>
                </control>
            </control>
        </itemlayout>
        <focusedlayout width="326" height="190" condition="String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <width>320</width>
                <height>180</height>
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <include>ThumbsViewLayoutFocus</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape"/>
                    </include>
                </control>
                <include content="HiddenWidgetButton">
                    <param name="widgetstyle" value="landscape"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
    </include>
    <include name="widget_layout_landscape_multi">
        <include condition="String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)" name="height" content="height">
            <param name="height" value="950" />
        </include>
        <include condition="![String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)]" name="height" content="height">
            <param name="height" value="760" />
        </include>
    </include>
    
    <!-- widget netflix large landscape -->
    <include name="widget_layout_landscapelarge">
        <include condition="$PARAM[multiRows]">widget_layout_landscapelarge_multi</include>
        <height>260</height>
        
        <animation effect="slide" delay="0" start="0" end="0,40" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,160" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-60" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-190" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-70" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        
        <itemlayout width="430" height="260">
            <control type="group">
                <width>430</width>
                <height>260</height>
                <include>ThumbsViewLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape" />
                    </include>
                </control>
            </control>
        </itemlayout>
        <focusedlayout width="430" height="260">
            <control type="group">
                <width>430</width>
                <height>260</height>
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <include>ThumbsViewLayoutFocus</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include name="$PARAM[widgetTags]" content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape" />
                    </include>
                </control>
                <include content="HiddenWidgetButton">
                    <param name="widgetstyle" value="landscapelarge" />
                    <param name="widgetid" value="$PARAM[widgetid]" />
                </include>
            </control>
        </focusedlayout>
    </include>
    <include name="widget_layout_landscapelarge_multi">
        <include condition="String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)" name="height" content="height">
            <param name="height" value="1040" />
        </include>
        <include condition="![String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)]" name="height" content="height">
            <param name="height" value="780" />
        </include>
    </include>
    
    <!-- landscape details -->
    <include name="widget_layout_landscapedetails">
        <height>210</height>
        
        <animation effect="slide" delay="0" start="0" end="0,100" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,220" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,0" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-10" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        
        <orientation>horizontal</orientation>
        <itemlayout width="366" height="210">
			<control type="group">
                <width>354</width>
                <height>200</height>
                <include>ThumbsViewLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape" />
                    </include>
                </control>
            </control>
		</itemlayout>
        <focusedlayout width="1090" height="205" condition="Control.HasFocus($PARAM[widgetid])">
            <include>widget_layout_landscapelarge_widebox</include>
            <include content="HiddenWidgetButton">
                <param name="widgetstyle" value="landscapedetails" />
                <param name="widgetid" value="$PARAM[widgetid]" />
            </include>
        </focusedlayout>
		<focusedlayout width="366" height="210" condition="!Control.HasFocus($PARAM[widgetid])">
			<control type="group">
                <width>354</width>
                <height>200</height>
                <include>ThumbsViewLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape" />
                    </include>
                </control>
                <include content="HiddenWidgetButton">
                    <param name="widgetstyle" value="landscapedetails" />
                    <param name="widgetid" value="$PARAM[widgetid]" />
                </include>
            </control>
		</focusedlayout>
	</include>
    <include name="widget_layout_landscapelarge_widebox">
        <!-- wide box widget -->
        <control type="group">
            <control type="image">
                <texture border="5">diffuse/panel.png</texture>
                <colordiffuse>$INFO[Skin.String(ViewDetailsPanelColor)]</colordiffuse>
            </control>
            <control type="image">
                <texture border="5">diffuse/thinborder.png</texture>
                <colordiffuse>$INFO[Skin.String(ViewDetailsFocusColor)]</colordiffuse>
            </control>
            <!-- poster image -->
            <control type="group">
                <width>354</width>
                <height>200</height>
                <include>ThumbsViewLayout</include>
            </control>
            <control type="label">
                <left>370</left>
                <width>70%</width>
                <top>8</top>
                <aligny>top</aligny>
                <height>80</height>
                <font>Reg30</font>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <label>$VAR[HomeMenuWidgetInfoLabel]</label>
            </control>
            <control type="textbox">
                <left>370</left>
                <right>30</right>
                <right>10</right>
                <top>50</top>
                <height>145</height>
                <font>Reg24</font>
                <align>justify</align>
                <autoscroll delay="4000" time="3000" repeat="10000" condition="!Control.HasFocus(510) + !Skin.HasSetting(DisablePlotAutoScroll)" />
                <autoscroll delay="4000" time="3000" repeat="10000" condition="Control.HasFocus(510) + !Skin.HasSetting(DisablePlotAutoScroll)" />
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <label>$VAR[HomeMenuWidgetInfoPlotAlt]</label>
            </control>
        </control>
    
    </include>
    
    <!-- widget banner layout -->
    <include name="widget_layout_banner">
        <include condition="String.Contains(Skin.String(HomeLayout),ver) + ![$PARAM[multiRows]]" name="height" content="height">
            <param name="height" value="146" />
        </include>
        <include condition="String.Contains(Skin.String(HomeLayout),ver) + [$PARAM[multiRows]] + ![String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)]" name="height" content="height">
            <param name="height" value="876" />
        </include>
        <include condition="String.Contains(Skin.String(HomeLayout),ver) + [$PARAM[multiRows]] + [String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)]" name="height" content="height">
            <param name="height" value="1022" />
        </include>
        <include condition="!String.Contains(Skin.String(HomeLayout),ver)" name="height" content="height">
            <param name="height" value="126" />
        </include>
        
        <animation effect="slide" delay="0" start="0" end="0,165" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,285" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,64" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-66" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,54" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        <itemlayout height="126" width="610" condition="!String.Contains(Skin.String(HomeLayout),ver)">
            <control type="image">
                <texture border="5">diffuse/banner.png</texture>
                <colordiffuse>$VAR[ViewDetailsPanelColor]</colordiffuse>
                <aspectratio scalediffuse="false" align="left">stretch</aspectratio>
                <include condition="Skin.String(thumbsborder_unfocused, 0)">thumbborder_0</include>
                <include condition="Skin.String(thumbsborder_unfocused, 2)">thumbborder_2</include>
                <include condition="Skin.String(thumbsborder_unfocused, 4)">thumbborder_4</include>
                <include condition="Skin.String(thumbsborder_unfocused, 6)">thumbborder_6</include>
            </control>
            <include>BannerLayout</include>
        </itemlayout>
        <focusedlayout height="126" width="610" condition="!String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <control type="image">
                    <texture border="5">diffuse/banner.png</texture>
                    <colordiffuse>$INFO[Skin.String(HomeViewDetailsFocusColor)]</colordiffuse>
                    <aspectratio scalediffuse="false" align="left">stretch</aspectratio>
                    <include condition="Skin.String(thumbsborder_focused, 2)">thumbborder_2</include>
                    <include condition="Skin.String(thumbsborder_focused, 4)">thumbborder_4</include>
                    <include condition="Skin.String(thumbsborder_focused, 6)">thumbborder_6</include>
                </control>
                <include>BannerLayout</include>
                <include name="HiddenWidgetButton" content="HiddenWidgetButton">
                    <param name="widgetstyle" value="banner"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
        <itemlayout height="146" width="650" condition="String.Contains(Skin.String(HomeLayout),ver)">
            <control type="image">
                <texture border="5">diffuse/banner.png</texture>
                <colordiffuse>$VAR[ViewDetailsPanelColor]</colordiffuse>
                <aspectratio scalediffuse="false" align="left">stretch</aspectratio>
                <include condition="Skin.String(thumbsborder_unfocused, 0)">thumbborder_0</include>
                <include condition="Skin.String(thumbsborder_unfocused, 2)">thumbborder_2</include>
                <include condition="Skin.String(thumbsborder_unfocused, 4)">thumbborder_4</include>
                <include condition="Skin.String(thumbsborder_unfocused, 6)">thumbborder_6</include>
            </control>
            <include>BannerLayout</include>
        </itemlayout>
        <focusedlayout height="146" width="650" condition="String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <control type="image">
                    <texture border="5">diffuse/banner.png</texture>
                    <colordiffuse>$INFO[Skin.String(HomeViewDetailsFocusColor)]</colordiffuse>
                    <aspectratio scalediffuse="false" align="left">stretch</aspectratio>
                    <include condition="Skin.String(thumbsborder_focused, 2)">thumbborder_2</include>
                    <include condition="Skin.String(thumbsborder_focused, 4)">thumbborder_4</include>
                    <include condition="Skin.String(thumbsborder_focused, 6)">thumbborder_6</include>
                </control>
                <include>BannerLayout</include>
                <include content="HiddenWidgetButton">
                    <param name="widgetstyle" value="banner"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
    </include>
    
    <!-- widget landscapesmall layout -->
    <include name="widget_layout_landscapesmall">
        <include condition="$PARAM[multiRows]">widget_layout_landscapesmall_multi</include>
        <height>148</height>
        
        <animation effect="slide" delay="0" start="0" end="0,162" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,282" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,62" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-68" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,52" time="200" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        
        <animation effect="slide" start="0" end="140" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + Skin.HasSetting(VerticalHomeLargeWidget) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        
        <animation effect="slide" start="0" end="262" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,6)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,5)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,3)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,2)">Conditional</animation>
        <animation effect="slide" start="0" end="262" time="0" condition="Skin.HasSetting(WidgetAlignRight) + !String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,1)">Conditional</animation>
        
        <animation effect="slide" start="0" end="260" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,4)">Conditional</animation>
        <animation effect="slide" start="0" end="260" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,3)">Conditional</animation>
        <animation effect="slide" start="0" end="260" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,2)">Conditional</animation>
        <animation effect="slide" start="0" end="260" time="0" condition="Skin.HasSetting(WidgetAlignRight) + String.Contains(Skin.String(HomeLayout),ver) + !Integer.IsGreater(Container($PARAM[widgetid]).NumItems,1)">Conditional</animation>
        
        <itemlayout width="262" height="148" condition="!String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <width>99%</width>
                <height>100%</height>
                <include>ThumbsViewLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlaySmall</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape"/>
                    </include>
                </control>
            </control>
        </itemlayout>
        <focusedlayout width="262" height="148" condition="!String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <width>99%</width>
                <height>100%</height>
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <include>ThumbsViewLayoutFocus</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlaySmall</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape"/>
                    </include>
                </control>
                <include content="HiddenWidgetButton">
                    <param name="widgetstyle" value="landscapesmall"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
        <itemlayout width="261" height="148" condition="String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <width>99%</width>
                <height>100%</height>
                <include>ThumbsViewLayout</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlaySmall</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape"/>
                    </include>
                </control>
            </control>
        </itemlayout>
        <focusedlayout width="261" height="148" condition="String.Contains(Skin.String(HomeLayout),ver)">
            <control type="group">
                <width>99%</width>
                <height>100%</height>
                <animation effect="zoom" center="auto" start="100" end="105" time="160" tween="quadratic" condition="Skin.HasSetting(WidgetsZoomFocus)">Focus</animation>
                <include>ThumbsViewLayoutFocus</include>
                <control type="group">
                    <description>widget label overlay</description>
                    <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlaySmall</include>
                    <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                    <include content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                        <param name="prefix" value="Landscape"/>
                    </include>
                </control>
                <include content="HiddenWidgetButton">
                    <param name="widgetstyle" value="landscapesmall"/>
                    <param name="widgetid" value="$PARAM[widgetid]"/>
                </include>
            </control>
        </focusedlayout>
    </include>
    <include name="widget_layout_landscapesmall_multi">
        <include condition="String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)" name="height" content="height">
            <param name="height" value="1036" />
        </include>
        <include condition="![String.IsEqual(Skin.AspectRatio,16:10) + Skin.HasSetting(VerticalHomeLargeWidget)]" name="height" content="height">
            <param name="height" value="740" />
        </include>
    </include>
    
    <!-- widget singlebox layout -->
    <include name="widget_layout_singlebox">
        <height>340</height>
        
        <animation effect="slide" delay="0" start="0" end="0,-30" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,90" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-130" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-260" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-140" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        
        <itemlayout height="340" width="1820" condition="!String.Contains(Skin.String(HomeLayout),ver)">
            <include>itemlayout_singlebox</include>
        </itemlayout>
        <focusedlayout height="340" width="1820" condition="!String.Contains(Skin.String(HomeLayout),ver)">
            <include content="HiddenWidgetButton">
                <param name="widgetstyle" value="singlebox"/>
                <param name="widgetid" value="$PARAM[widgetid]"/>
            </include>
            <control type="image">
                <include condition="Skin.HasSetting(WidgetAlignRight)">widget_layout_singlebox_rightalign</include>
                <bordersize>0</bordersize>
                <height>330</height>
                <width>940</width>
                <texture border="15">diffuse/bgpanel.png</texture>
                <colordiffuse>$VAR[ViewDetailsFocusColor]</colordiffuse>
                <visible>Control.HasFocus($PARAM[widgetid])</visible>
            </control>
            <include content="itemlayout_singlebox">
                <param name="widgetid" value="$PARAM[widgetid]"/>
            </include>
        </focusedlayout>
        
        <itemlayout height="340" width="1302" condition="String.Contains(Skin.String(HomeLayout),ver) + !Skin.HasSetting(VerticalHomeLargeWidget)">
            <include>itemlayout_singlebox</include>
        </itemlayout>
        <focusedlayout height="340" width="1302" condition="String.Contains(Skin.String(HomeLayout),ver) + !Skin.HasSetting(VerticalHomeLargeWidget)">
            <include content="HiddenWidgetButton">
                <param name="widgetstyle" value="singlebox"/>
                <param name="widgetid" value="$PARAM[widgetid]"/>
            </include>
            <control type="image">
                <include condition="Skin.HasSetting(WidgetAlignRight)">widget_layout_singlebox_rightalign</include>
                <bordersize>0</bordersize>
                <height>330</height>
                <width>940</width>
                <texture border="15">diffuse/bgpanel.png</texture>
                <colordiffuse>$VAR[ViewDetailsFocusColor]</colordiffuse>
                <visible>Control.HasFocus($PARAM[widgetid])</visible>
            </control>
            <include content="itemlayout_singlebox">
                <param name="widgetid" value="$PARAM[widgetid]"/>
            </include>
        </focusedlayout>
    
        <itemlayout height="340" width="1440" condition="String.Contains(Skin.String(HomeLayout),ver) + Skin.HasSetting(VerticalHomeLargeWidget)">
            <include>itemlayout_singlebox</include>
        </itemlayout>
        <focusedlayout height="340" width="1440" condition="String.Contains(Skin.String(HomeLayout),ver) + Skin.HasSetting(VerticalHomeLargeWidget)">
            <include name="HiddenWidgetButton" content="HiddenWidgetButton">
                <param name="widgetstyle" value="singlebox"/>
                <param name="widgetid" value="$PARAM[widgetid]"/>
            </include>
            <control type="image">
                <include condition="Skin.HasSetting(WidgetAlignRight)">widget_layout_singlebox_rightalign</include>
                <bordersize>0</bordersize>
                <height>330</height>
                <width>940</width>
                <texture border="15">diffuse/bgpanel.png</texture>
                <colordiffuse>$VAR[ViewDetailsFocusColor]</colordiffuse>
                <visible>Control.HasFocus($PARAM[widgetid])</visible>
            </control>
            <include content="itemlayout_singlebox">
                <param name="widgetid" value="$PARAM[widgetid]"/>
            </include>
        </focusedlayout>
    
    </include>
    <include name="itemlayout_singlebox">
        <!-- single box widget -->
        <control type="group">
            <height>330</height>
            <width>940</width>
            <include condition="Skin.HasSetting(WidgetAlignRight)">widget_layout_singlebox_rightalign</include>
            <control type="image">
                <bordersize>4</bordersize>
                <texture border="15">diffuse/bgpanel.png</texture>
                <colordiffuse>$INFO[Skin.String(ViewDetailsPanelColor)]</colordiffuse>
            </control>
            <control type="image">
                <texture border="5">diffuse/thinborder.png</texture>
                <colordiffuse>darkgrey</colordiffuse>
                <bordersize>4</bordersize>
                <visible>Skin.HasTheme(skindefault)</visible>
            </control>
            <!-- poster image -->
            <control type="image">
                <width>240</width>
                <height>329</height>
                <texture border="1" background="true" diffuse="diffuse/poster.png" fallback="DefaultVideo.png">$VAR[PosterThumbList]</texture>
                <aspectratio scalediffuse="true" aligny="top" align="left">keep</aspectratio>
                <bordersize>12</bordersize>
            </control>
            <control type="label">
                <left>251</left>
                <top>0</top>
                <width>650</width>
                <aligny>center</aligny>
                <height>60</height>
                <font>Reg30</font>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <label>$VAR[HomeMenuWidgetInfoLabel]</label>
            </control>
            <control type="textbox">
                <!--description with mediaflags present -->
                <visible>!String.IsEmpty(ListItem.VideoCodec)</visible>
                <left>251</left>
                <width>650</width>
                <top>60</top>
                <bottom>70</bottom>
                <font>Reg24</font>
                <align>justify</align>
                <autoscroll delay="4000" time="3000" repeat="10000" condition="!Control.HasFocus($PARAM[widgetid]) + !Skin.HasSetting(DisablePlotAutoScroll)"/>
                <autoscroll delay="4000" time="3000" repeat="10000" condition="Control.HasFocus($PARAM[widgetid]) + !Skin.HasSetting(DisablePlotAutoScroll)"/>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <label>$VAR[HomeMenuWidgetInfoPlotAlt]</label>
            </control>
            <control type="textbox">
                <!--description with no mediaflags -->
                <visible>String.IsEmpty(ListItem.VideoCodec)</visible>
                <left>251</left>
                <width>650</width>
                <top>60</top>
                <bottom>17</bottom>
                <font>Reg24</font>
                <align>justify</align>
                <autoscroll delay="4000" time="3000" repeat="10000" condition="!Control.HasFocus($PARAM[widgetid]) + !Skin.HasSetting(DisablePlotAutoScroll)"/>
                <autoscroll delay="4000" time="3000" repeat="10000" condition="Control.HasFocus($PARAM[widgetid]) + !Skin.HasSetting(DisablePlotAutoScroll)"/>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <label>$VAR[HomeMenuWidgetInfoPlotAlt]</label>
            </control>
            <control type="group">
                <height>36</height>
                <left>251</left>
                <bottom>10</bottom>
                <control type="label">
                    <font>flags</font>
                    <width>auto</width>
                    <height>30</height>
                    <visible>!String.IsEmpty(ListItem.VideoCodec)</visible>
                    <label>$VAR[VideoFileTypeVar,, • ]$VAR[VideoCodecVar,, • ]$VAR[VideoAspectVar,, • ]$VAR[VideoResolutionVar,, • ]$VAR[AudioCodecVar,, • ]$VAR[AudioChannelsVar]$VAR[AudioLanguageVar, • ]</label>
                    <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                </control>
            </control>
            <control type="group">
                <!--Watched Overlay-->
                <right>8</right>
                <top>8</top>
                <animation effect="slide" end="-2,2" time="0" condition="!Skin.HasTheme(skindefault)">Conditional</animation>
                <include name="WatchedIndicatorLayout" content="WatchedIndicatorLayout">
                    <param name="width" value="80"/>
                    <param name="height" value="80"/>
                    <param name="font" value="indicator_normal"/>
                    <param name="labeloffsetx" value="-30"/>
                    <param name="labeloffsety" value="-4"/>
                    <param name="overlay" value="normal"/>
                    <param name="overlay_texture" value="diffuse/icon_overlay_landscape.png"/>
                </include>
            </control>
        </control>
    </include>
    <include name="widget_layout_singlebox_rightalign">
        <right>0</right>
    </include>
    
    <!-- widget widebox layout -->
    <include name="widget_layout_widebox">
        <height>265</height>
        
        <animation effect="slide" delay="0" start="0" end="0,55" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,175" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-45" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.Contains(Skin.String(HomeLayout),simplehor) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-370" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + [[[Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + !Skin.HasSetting(LowerWidgets)] | [Skin.String(HomeLayout,2) | Skin.String(HomeLayout,2small)]] + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-175" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + !String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>
        <animation effect="slide" delay="0" start="0" end="0,-55" time="0" condition="String.IsEmpty(Window(Home).Property(netflixview)) + String.IsEqual(Skin.AspectRatio,16:10) + [Skin.String(HomeLayout,1) | Skin.String(HomeLayout,1small)] + Skin.HasSetting(LowerWidgets) + Skin.HasSetting(AutoShowWidgets) + [!String.IsEqual(Window(Home).Property(ShowWidget),show) | Skin.HasSetting(HideWidgetDetailsPanel)]">Conditional</animation>

        
        <itemlayout height="265" width="1820" condition="!String.Contains(Skin.String(HomeLayout),ver)">
            <include>itemlayout_widebox</include>
        </itemlayout>
        <itemlayout height="265" width="1300" condition="String.Contains(Skin.String(HomeLayout),ver)">
            <include>itemlayout_widebox</include>
        </itemlayout>
        <focusedlayout height="265" width="1820" condition="!String.Contains(Skin.String(HomeLayout),ver)">
            <include>itemlayout_widebox_focus</include>
        </focusedlayout>
         <focusedlayout height="265" width="1300" condition="String.Contains(Skin.String(HomeLayout),ver)">
            <include>itemlayout_widebox_focus</include>
        </focusedlayout>
    </include>
    <include name="itemlayout_widebox">
        <!-- wide box widget -->
        <control type="group">
            <height>255</height>
            <control type="image">
                <bordersize>4</bordersize>
                <texture border="15">diffuse/bgpanel.png</texture>
                <colordiffuse>$INFO[Skin.String(ViewDetailsPanelColor)]</colordiffuse>
            </control>
            <control type="image">
                <texture border="5">diffuse/thinborder.png</texture>
                <colordiffuse>darkgrey</colordiffuse>
                <bordersize>4</bordersize>
                <visible>Skin.HasTheme(skindefault)</visible>
            </control>
            <!-- poster image -->
            <control type="image">
                <width>190</width>
                <height>100%</height>
                <texture border="1" background="true" diffuse="diffuse/poster.png" fallback="DefaultVideo.png">$VAR[PosterThumbList]</texture>
                <aspectratio scalediffuse="true" aligny="top" align="left">keep</aspectratio>
                <bordersize>12</bordersize>
            </control>
            <control type="label">
                <left>200</left>
                <width>70%</width>
                <top>12</top>
                <aligny>top</aligny>
                <height>80</height>
                <font>Reg30</font>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <label>$VAR[HomeMenuWidgetInfoLabel]</label>
            </control>
            <control type="textbox">
                <left>200</left>
                <right>30</right>
                <right>10</right>
                <top>60</top>
                <height>145</height>
                <font>Reg24</font>
                <align>justify</align>
                <autoscroll delay="4000" time="3000" repeat="10000" condition="!Control.HasFocus(510) + !Skin.HasSetting(DisablePlotAutoScroll)"/>
                <autoscroll delay="4000" time="3000" repeat="10000" condition="Control.HasFocus(510) + !Skin.HasSetting(DisablePlotAutoScroll)"/>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <label>$VAR[HomeMenuWidgetInfoPlotAlt]</label>
            </control>
            <control type="group">
                <!--Watched Overlay-->
                <right>8</right>
                <top>8</top>
                <animation effect="slide" end="-2,2" time="0" condition="!Skin.HasTheme(skindefault)">Conditional</animation>
                <include name="WatchedIndicatorLayout" content="WatchedIndicatorLayout">
                    <param name="width" value="80"/>
                    <param name="height" value="80"/>
                    <param name="font" value="indicator_normal"/>
                    <param name="labeloffsetx" value="-30"/>
                    <param name="labeloffsety" value="-4"/>
                    <param name="overlay" value="normal"/>
                    <param name="overlay_texture" value="diffuse/icon_overlay_landscape.png"/>
                </include>
            </control>
        </control>
    </include>
    <include name="itemlayout_widebox_focus">
        <include content="HiddenWidgetButton">
                <param name="widgetstyle" value="widebox"/>
            <param name="widgetid" value="$PARAM[widgetid]"/>
        </include>
        <control type="image">
            <bordersize>0</bordersize>
            <texture border="15">diffuse/bgpanel.png</texture>
            <colordiffuse>$VAR[ViewDetailsFocusColor]</colordiffuse>
        </control>
        <include>itemlayout_widebox</include>
    </include>
    
    <include name="widget_header_multi">
        <control type="group" id="20$PARAM[widgetid]">
            <width>100%</width>
            <height>45</height>
            <visible>String.IsEqual(Container(300).ListItem.Property(submenuVisibility),$PARAM[submenuid]) | Skin.HasSetting(ShowAllWidgets)</visible>
            <control type="image">
                <texture border="5">diffuse/panel.png</texture>
                <colordiffuse>$INFO[Skin.String(ViewDetailsPanelColor)]</colordiffuse>
                <visible>!Skin.HasSetting(HideWidgetPanelBackground) + Skin.String(HomeLayout,netflix)</visible>
            </control>
            <control type="textbox">
                <height>95%</height>
                <width>99%</width>
                <font>Reg32</font>
                <include condition="Skin.HasSetting(WidgetAlignRight)">widget_header_rightalign</include>
                <align>left</align>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <shadowcolor>$INFO[Skin.String(ViewDetailsTextShadowColor)]</shadowcolor>
                <label>$PARAM[widgetName]</label>
                <animation effect="slide" end="50" time="0" condition="Container($PARAM[widgetid]).IsUpdating + !Skin.HasSetting(WidgetAlignRight)">Conditional</animation>
                <animation effect="slide" end="-50" time="0" condition="Container($PARAM[widgetid]).IsUpdating + Skin.HasSetting(WidgetAlignRight)">Conditional</animation>
                <visible>String.IsEmpty(Container($PARAM[widgetid]).ListItem.Property(similartitle))</visible>
            </control>
            <control type="textbox">
                <height>95%</height>
                <width>99%</width>
                <font>Reg32</font>
                <include condition="Skin.HasSetting(WidgetAlignRight)">widget_header_rightalign</include>
                <align>left</align>
                <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
                <shadowcolor>$INFO[Skin.String(ViewDetailsTextShadowColor)]</shadowcolor>
                <label>$LOCALIZE[31543] $INFO[Container($PARAM[widgetid]).ListItem.Property(similartitle)]</label>
                <animation effect="slide" end="50" time="0" condition="Container($PARAM[widgetid]).IsUpdating + !Skin.HasSetting(WidgetAlignRight)">Conditional</animation>
                <animation effect="slide" end="-50" time="0" condition="Container($PARAM[widgetid]).IsUpdating + Skin.HasSetting(WidgetAlignRight)">Conditional</animation>
                <visible>!String.IsEmpty(Container($PARAM[widgetid]).ListItem.Property(similartitle))</visible>
            </control>
            <control type="multiimage">
                <width>100%</width>
                <height>45</height>
                <top>0</top>
                <include condition="Skin.HasSetting(WidgetAlignRight)">widget_header_rightalign</include>
                <aspectratio align="left">keep</aspectratio>
                <imagepath background="true">widgets/widgets-busy-loader/</imagepath>
                <timeperimage>35</timeperimage>
                <colordiffuse>$INFO[Skin.String(SpinnerTexture.Color)]</colordiffuse>
                <fadetime>0</fadetime>
                <visible>Container($PARAM[widgetid]).IsUpdating</visible>
            </control>
        </control>
    </include>
    <include name="widget_header_single">
        <control type="radiobutton" id="$PARAM[mainmenuid]505">
            <include condition="Skin.String(Homelayout,enhanced)">widget_header_enhancedhome</include>
            <include condition="Skin.HasSetting(WidgetAlignRight) + !Skin.String(Homelayout,enhanced)">widget_header_rightalign</include>
            <include condition="![String.Contains(Skin.String(HomeLayout),netflix) | String.Contains(Skin.String(HomeLayout),ver) | Skin.String(HomeLayout,enhanced)]">widget_header_single_fade</include>
            <width>100%</width>
            <height>50</height>
            <align>left</align>
            <aligny>top</aligny>
            <font>Reg32</font>
            <textoffsetx>5</textoffsetx>
            <label>$VAR[widgetlabel-$PARAM[mainmenuid]]</label>
            <textcolor>$INFO[Skin.String(ViewDetailsTextColor)]</textcolor>
            <shadowcolor>$INFO[Skin.String(ViewDetailsTextShadowColor)]</shadowcolor>
            <onfocus>SetProperty(ShowWidget,show)</onfocus>
            
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],0) + $PARAM[hasWidget1] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle2])">SetProperty(widgetstyle,$PARAM[widgetStyle2])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],1) + $PARAM[hasWidget2] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle3])">SetProperty(widgetstyle,$PARAM[widgetStyle3])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],1) + !$PARAM[hasWidget2] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle1])">SetProperty(widgetstyle,$PARAM[widgetStyle1])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],2) + $PARAM[hasWidget3] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle4])">SetProperty(widgetstyle,$PARAM[widgetStyle4])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],2) + !$PARAM[hasWidget3] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle1])">SetProperty(widgetstyle,$PARAM[widgetStyle1])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],3) + $PARAM[hasWidget4] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle5])">SetProperty(widgetstyle,$PARAM[widgetStyle5])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],3) + !$PARAM[hasWidget4] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle1])">SetProperty(widgetstyle,$PARAM[widgetStyle1])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],4) + $PARAM[hasWidget5] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle6])">SetProperty(widgetstyle,$PARAM[widgetStyle6])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],4) + !$PARAM[hasWidget5] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle1])">SetProperty(widgetstyle,$PARAM[widgetStyle1])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],5) + $PARAM[hasWidget6] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle7])">SetProperty(widgetstyle,$PARAM[widgetStyle7])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],5) + !$PARAM[hasWidget6] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle1])">SetProperty(widgetstyle,$PARAM[widgetStyle1])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],6) + $PARAM[hasWidget7] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle8])">SetProperty(widgetstyle,$PARAM[widgetStyle8])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],6) + !$PARAM[hasWidget7] + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle1])">SetProperty(widgetstyle,$PARAM[widgetStyle1])</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],7) + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle1])">SetProperty(widgetstyle,$PARAM[widgetStyle1])</onclick>
            
            <onclick condition="[Skin.String(widgetvalue-$PARAM[submenuid],0) | !Skin.String(widgetvalue-$PARAM[submenuid])] + $PARAM[hasWidget1]">Skin.SetString(widgetvalue-$PARAM[submenuid],1)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],1) + $PARAM[hasWidget2]">Skin.SetString(widgetvalue-$PARAM[submenuid],2)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],1) + !$PARAM[hasWidget2]">Skin.SetString(widgetvalue-$PARAM[submenuid],0)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],2) + $PARAM[hasWidget3]">Skin.SetString(widgetvalue-$PARAM[submenuid],3)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],2) + !$PARAM[hasWidget3]">Skin.SetString(widgetvalue-$PARAM[submenuid],0)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],3) + $PARAM[hasWidget4]">Skin.SetString(widgetvalue-$PARAM[submenuid],4)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],3) + !$PARAM[hasWidget4]">Skin.SetString(widgetvalue-$PARAM[submenuid],0)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],4) + $PARAM[hasWidget5]">Skin.SetString(widgetvalue-$PARAM[submenuid],5)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],4) + !$PARAM[hasWidget5]">Skin.SetString(widgetvalue-$PARAM[submenuid],0)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],5) + $PARAM[hasWidget6]">Skin.SetString(widgetvalue-$PARAM[submenuid],6)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],5) + !$PARAM[hasWidget6]">Skin.SetString(widgetvalue-$PARAM[submenuid],0)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],6) + $PARAM[hasWidget7]">Skin.SetString(widgetvalue-$PARAM[submenuid],7)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],6) + !$PARAM[hasWidget7]">Skin.SetString(widgetvalue-$PARAM[submenuid],0)</onclick>
            <onclick condition="Skin.String(widgetvalue-$PARAM[submenuid],7)">Skin.SetString(widgetvalue-$PARAM[submenuid],0)</onclick>
            
            <onfocus condition="Skin.String(widgetvalue-$PARAM[submenuid],0) + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle1])">SetProperty(widgetstyle,$PARAM[widgetStyle1])</onfocus>
            <onfocus condition="Skin.String(widgetvalue-$PARAM[submenuid],1) + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle2])">SetProperty(widgetstyle,$PARAM[widgetStyle2])</onfocus>
            <onfocus condition="Skin.String(widgetvalue-$PARAM[submenuid],2) + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle3])">SetProperty(widgetstyle,$PARAM[widgetStyle3])</onfocus>
            <onfocus condition="Skin.String(widgetvalue-$PARAM[submenuid],3) + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle4])">SetProperty(widgetstyle,$PARAM[widgetStyle4])</onfocus>
            <onfocus condition="Skin.String(widgetvalue-$PARAM[submenuid],4) + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle5])">SetProperty(widgetstyle,$PARAM[widgetStyle5])</onfocus>
            <onfocus condition="Skin.String(widgetvalue-$PARAM[submenuid],5) + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle6])">SetProperty(widgetstyle,$PARAM[widgetStyle6])</onfocus>
            <onfocus condition="Skin.String(widgetvalue-$PARAM[submenuid],6) + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle7])">SetProperty(widgetstyle,$PARAM[widgetStyle7])</onfocus>
            <onfocus condition="Skin.String(widgetvalue-$PARAM[submenuid],7) + !Skin.String(CompareTxtDefault,$PARAM[widgetStyle8])">SetProperty(widgetstyle,$PARAM[widgetStyle8])</onfocus>
            <include content="WidgetProperties">
                <param name="widgetid" value="0" />
            </include>
            <texturenofocus></texturenofocus>
            <radiowidth>40</radiowidth>
            <radioheight>40</radioheight>
            <radioposx>0</radioposx>
            <radioposy>0</radioposy>
            <textureradiofocus colordiffuse="$INFO[Skin.String(ButtonFocusTextColor)]">home/home_arrow_up.png</textureradiofocus>
            <textureradionofocus colordiffuse="$INFO[Skin.String(ViewDetailsTextColor)]">home/home_arrow_up.png</textureradionofocus>
            <selected>Control.HasFocus($PARAM[mainmenuid]505)</selected>
            <visible>String.IsEqual(Container(300).ListItem.Property(submenuVisibility),$PARAM[submenuid]) | Skin.HasSetting(ShowAllWidgets)</visible>
        </control>
        <control type="group" id="$PARAM[mainmenuid]905">
            <height>1</height>
            <width>100%</width>
            <visible>String.IsEqual(Container(300).ListItem.Property(submenuVisibility),$PARAM[submenuid]) | Skin.HasSetting(ShowAllWidgets)</visible>
            <animation effect="slide" delay="0" start="0" end="0,150" time="0" condition="String.Contains(Skin.String(HomeLayout),horizontal) + Skin.HasSetting(AutoShowWidgets) + !String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
            <control type="multiimage">
                <top>40</top>
                <left>10</left>
                <width>98%</width>
                <height>80</height>
                <include condition="Skin.HasSetting(WidgetAlignRight) + !Skin.String(Homelayout,enhanced)">widget_header_rightalign</include>
                <aspectratio align="left">keep</aspectratio>
                <imagepath background="true">widgets/widgets-busy-loader/</imagepath>
                <timeperimage>35</timeperimage>
                <colordiffuse>$INFO[Skin.String(SpinnerTexture.Color)]</colordiffuse>
                <fadetime>0</fadetime>
                <visible>
                    [Skin.String(widgetvalue-$PARAM[submenuid],7) + Container($PARAM[mainmenuid]580).IsUpdating] | 
                    [Skin.String(widgetvalue-$PARAM[submenuid],6) + Container($PARAM[mainmenuid]570).IsUpdating] | 
                    [Skin.String(widgetvalue-$PARAM[submenuid],5) + Container($PARAM[mainmenuid]560).IsUpdating] | 
                    [Skin.String(widgetvalue-$PARAM[submenuid],4) + Container($PARAM[mainmenuid]550).IsUpdating] | 
                    [Skin.String(widgetvalue-$PARAM[submenuid],3) + Container($PARAM[mainmenuid]540).IsUpdating] | 
                    [Skin.String(widgetvalue-$PARAM[submenuid],2) + Container($PARAM[mainmenuid]530).IsUpdating] | 
                    [Skin.String(widgetvalue-$PARAM[submenuid],1) + Container($PARAM[mainmenuid]520).IsUpdating] | 
                    [Skin.String(widgetvalue-$PARAM[submenuid],0) + Container($PARAM[mainmenuid]510).IsUpdating] | 
                    [!Skin.String(widgetvalue-$PARAM[submenuid]) + Container($PARAM[mainmenuid]510).IsUpdating]
                </visible>
            </control>
        </control>
    </include>
    <include name="widget_header_rightalign">
        <align>right</align>
        <textoffsetx>60</textoffsetx>
        <aspectratio align="right">keep</aspectratio>
    </include>
    <include name="widget_header_enhancedhome">
        <font>Reg26</font>
        <align>left</align>
        <aligny>center</aligny>
        <textoffsetx>0</textoffsetx>
        <textureradiofocus></textureradiofocus>
        <textureradionofocus></textureradionofocus>
        <width>337</width>
    </include>
    <include name="widget_header_single_fade">
        <animation effect="fade" delay="0" start="100" end="0" time="0" condition="!String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation>
        <animation effect="fade" delay="0" start="0" end="100" time="200" condition="String.IsEqual(Window(Home).Property(ShowWidget),show)">Conditional</animation> 
    </include>
    
    <include name="widget_base">
        <include content="widget_base_normal" condition="![Skin.String(HomeLayout,win10) | Skin.String(HomeLayout,enhanced)]">
            <param name="containerType" value="$PARAM[containerType]" />
            <param name="contentStyle" value="$PARAM[contentStyle]" />
            <param name="widgetid" value="$PARAM[widgetid]" />
            <param name="submenuid" value="$PARAM[submenuid]" />
            <param name="widgetTags" value="$PARAM[widgetTags]" />
            <param name="widgetTarget" value="$PARAM[widgetTarget]" />
            <param name="widgetPath" value="$PARAM[widgetPath]" />
            <param name="widgetStyle" value="$PARAM[widgetStyle]" />
            <param name="visibility" value="$PARAM[visibility]" />
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_base_enhanced" condition="Skin.String(HomeLayout,enhanced)">
            <param name="containerType" value="$PARAM[containerType]" />
            <param name="contentStyle" value="$PARAM[contentStyle]" />
            <param name="widgetid" value="$PARAM[widgetid]" />
            <param name="submenuid" value="$PARAM[submenuid]" />
            <param name="widgetTags" value="$PARAM[widgetTags]" />
            <param name="widgetTarget" value="$PARAM[widgetTarget]" />
            <param name="widgetPath" value="$PARAM[widgetPath]" />
            <param name="widgetStyle" value="$PARAM[widgetStyle]" />
            <param name="visibility" value="$PARAM[visibility]" />
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
        <include content="widget_base_win10" condition="Skin.String(HomeLayout,win10)">
            <param name="containerType" value="$PARAM[containerType]" />
            <param name="contentStyle" value="$PARAM[contentStyle]" />
            <param name="widgetid" value="$PARAM[widgetid]" />
            <param name="widgetName" value="$PARAM[widgetName]" />
            <param name="submenuid" value="$PARAM[submenuid]" />
            <param name="widgetTags" value="$PARAM[widgetTags]" />
            <param name="widgetTarget" value="$PARAM[widgetTarget]" />
            <param name="widgetPath" value="$PARAM[widgetPath]" />
            <param name="widgetStyle" value="$PARAM[widgetStyle]" />
            <param name="widgetInfoPanel" value="$PARAM[widgetInfoPanel]" />
            <param name="visibility" value="$PARAM[visibility]" />
            <param name="multiRows" value="$PARAM[multiRows]" />
        </include>
    </include>
    <include name="widget_base_win10">
        <include content="HomeWin10SpotlightPanel" condition="Skin.String(CompareTxtTop, $PARAM[widgetInfoPanel]) | Skin.String(CompareTxtBottom, $PARAM[widgetInfoPanel])">
            <param name="widgetid" value="$PARAM[widgetid]" />
            <param name="position" value="$PARAM[widgetInfoPanel]" />
        </include>
        <control type="group" id="$PARAM[widgetid]5">
            <description>Heading</description>
            <width>1</width>
            <height>1</height>
            <animation effect="slide" end="13,-50" time="0" condition="true">Conditional</animation>
            <visible>Control.IsVisible($PARAM[widgetid])</visible>
            <control type="label">
                <height>40</height>
                <width>690</width>
                <font>Reg28</font>
                <align>left</align>
                <aligny>top</aligny>
                <textcolor>$INFO[Skin.String(HeaderTextColor)]</textcolor>
                <label>$PARAM[widgetName]</label>
                <visible>String.IsEmpty(Container($PARAM[widgetid]).ListItem.Property(similartitle))</visible>
            </control>
            <control type="label">
                <height>40</height>
                <width>690</width>
                <font>Reg28</font>
                <align>left</align>
                <aligny>top</aligny>
                <textcolor>$INFO[Skin.String(HeaderTextColor)]</textcolor>
                <label>$LOCALIZE[31543] $INFO[Container($PARAM[widgetid]).ListItem.Property(similartitle)]</label>
                <visible>!String.IsEmpty(Container($PARAM[widgetid]).ListItem.Property(similartitle))</visible>
            </control>
            <control type="multiimage" id="$PARAM[widgetid]7">
                <width>650</width>
                <height>90</height>
                <top>200</top>
                <aspectratio align="center">keep</aspectratio>
                <imagepath background="true">widgets/widgets-busy-loader/</imagepath>
                <timeperimage>35</timeperimage>
                <colordiffuse>$INFO[Skin.String(SpinnerTexture.Color)]</colordiffuse>
                <fadetime>0</fadetime>
                <visible>Container($PARAM[widgetid]).IsUpdating</visible>
            </control>
        </control>
        <control type="panel" id="$PARAM[widgetid]">
            <description>Widget</description>
            <focusposition>0</focusposition>
            <width>690</width>
            <animation effect="slide" end="0,440" time="0" condition="Skin.String(CompareTxtTop, $PARAM[widgetInfoPanel])">Conditional</animation>
            <include condition="Skin.String(CompareTxtDisable, $PARAM[widgetInfoPanel])">widget_base_win10_altheight</include>
            <include condition="Skin.String(CompareTxtLarge, $PARAM[widgetInfoPanel])">widget_base_win10_altheight</include>
            <height>440</height>
            <oninfo>RunScript(script.skin.helper.service,action=showinfo)</oninfo>
            <orientation>vertical</orientation>
            <animation condition="!Control.HasFocus($PARAM[widgetid]) + Skin.HasSetting(Widgets_Animation)" reversible="false" type="Visible">
                <effect center="960,540" delay="280" easing="in" end="100" start="98" time="180" tween="sine" type="zoom"/>
                <effect delay="280" easing="in" end="0,0" start="0,40" time="180" tween="sine" type="slide"/>
                <effect delay="280" easing="in" end="100" start="0" time="180" tween="sine" type="fade"/>
            </animation>
            <animation time="100" effect="fade" start="0" end="100" reversible="false" easing="inout" condition="!Skin.HasSetting(Widgets_Animation)">Visible</animation>
            <include content="win10_$PARAM[widgetStyle]">
                <param name="widgetid" value="$PARAM[widgetid]" />
                <param name="widgetTags" value="$PARAM[widgetTags]" />
            </include>
            <include content="widget_base_content_$PARAM[contentStyle]">
                <param name="widgetid" value="$PARAM[widgetid]" />
                <param name="submenuid" value="$PARAM[submenuid]" />
                <param name="widgetTarget" value="$PARAM[widgetTarget]" />
                <param name="widgetPath" value="$PARAM[widgetPath]" />
            </include>
            <visible>String.IsEqual(Container(300).ListItem.Property(submenuVisibility),$PARAM[submenuid]) | Skin.HasSetting(ShowAllWidgets)</visible>
            <visible>$PARAM[visibility]</visible>
        </control>
        <include content="HomeWin10SpotlightPanelLarge" condition="Skin.String(CompareTxtLarge, $PARAM[widgetInfoPanel])">
            <param name="widgetid" value="$PARAM[widgetid]" />
            <param name="position" value="$PARAM[widgetInfoPanel]" />
        </include>
    </include>
    <include name="widget_base_win10_altheight">
        <height>880</height>
    </include>
    <include name="widget_base_enhanced">
        <control type="$PARAM[containerType]" id="$PARAM[widgetid]">
            <height>615</height>
            <width>362</width>
            <oninfo>RunScript(script.skin.helper.service,action=showinfo)</oninfo>
            <orientation>vertical</orientation>
            <focusposition>2</focusposition>
            <scrolltime tween="cubic" easing="inout">500</scrolltime>
            <itemlayout width="350" height="205">
                <control type="group">
                    <width>337</width>
                    <height>195</height>
                    <include>ThumbsViewLayout</include>
                    <control type="group">
                        <description>widget label overlay</description>
                        <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                        <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                        <include content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                            <param name="prefix" value="Landscape" />
                        </include>
                    </control>
                </control>
            </itemlayout>
            <focusedlayout width="350" height="205">
                <control type="group">
                    <width>337</width>
                    <height>195</height>
                    <include>ThumbsViewLayoutFocus</include>
                    <control type="group">
                        <description>widget label overlay</description>
                        <include condition="!Skin.String(Widgets_DisplayTags,disable)">ThumbsTagOverlay</include>
                        <include condition="Skin.String(Widgets_DisplayTags,auto)">LandscapeTagOverlayVisibility</include>
                        <include content="$PARAM[widgetTags]" condition="Skin.String(Widgets_DisplayTags,override)">
                            <param name="prefix" value="Landscape" />
                        </include>
                    </control>
                </control>
                <control type="button">
                    <visible>false</visible>
                    <onfocus>Setproperty(SkinHelper.WidgetContainer,$PARAM[widgetid])</onfocus>
                    <onfocus condition="Skin.HasSetting(SpotLightTrailers)">RunScript(script.skin.helper.service,ACTION=playtrailer,MODE=windowed,YOUTUBE=$INFO[Skin.String(AutoYoutubeTrailer)],WIDGETCONTAINER=$PARAM[widgetid])</onfocus>
                    <onunfocus condition="Skin.HasSetting(SpotLightTrailers) + !String.IsEmpty(Window(Home).Property(TrailerPlaying)) + !String.IsEqual(Window(Home).Property(TrailerPlaying),fullscreen)">PlayerControl(Stop)</onunfocus>
                    <include name="WidgetProperties" content="WidgetProperties">
                        <param name="widgetid" value="$PARAM[widgetid]" />
                    </include>
                </control>
            </focusedlayout>
            <animation condition="!Control.HasFocus(77777) + Skin.HasSetting(Widgets_Animation)" reversible="false" type="Visible">
                <effect center="960,540" delay="280" easing="in" end="100" start="98" time="180" tween="sine" type="zoom"/>
                <effect delay="280" easing="in" end="0,0" start="0,40" time="180" tween="sine" type="slide"/>
                <effect delay="280" easing="in" end="100" start="0" time="180" tween="sine" type="fade"/>
            </animation>
            <animation time="100" effect="fade" start="0" end="100" reversible="false" easing="inout" condition="!Skin.HasSetting(Widgets_Animation)">Visible</animation>
            <include content="widget_base_content_$PARAM[contentStyle]">
                <param name="widgetid" value="$PARAM[widgetid]" />
                <param name="submenuid" value="$PARAM[submenuid]" />
                <param name="widgetTarget" value="$PARAM[widgetTarget]" />
                <param name="widgetPath" value="$PARAM[widgetPath]" />
            </include>
            <visible>String.IsEqual(Container(300).ListItem.Property(submenuVisibility),$PARAM[submenuid])</visible>
            <visible>$PARAM[visibility]</visible>
        </control>
    </include>
    <include name="widget_base_normal">
        <control type="$PARAM[containerType]" id="$PARAM[widgetid]">
            <include condition="$PARAM[multiRows]">widget_base_vertical</include>
            <focusposition>0</focusposition>
            <width>100%</width>
            <oninfo>RunScript(script.skin.helper.service,action=showinfo)</oninfo>
            <onfocus>SetProperty(ShowWidget,show)</onfocus>
            <orientation>horizontal</orientation>
            <animation condition="!Control.HasFocus(77777) + Skin.HasSetting(Widgets_Animation)" reversible="false" type="Visible">
                <effect center="960,540" delay="280" easing="in" end="100" start="98" time="180" tween="sine" type="zoom"/>
                <effect delay="280" easing="in" end="0,0" start="0,40" time="180" tween="sine" type="slide"/>
                <effect delay="280" easing="in" end="100" start="0" time="180" tween="sine" type="fade"/>
            </animation>
            <animation time="100" effect="fade" start="0" end="100" reversible="false" easing="inout" condition="!Skin.HasSetting(Widgets_Animation)">Visible</animation>
            <include content="$PARAM[widgetStyle]">
                <param name="widgetid" value="$PARAM[widgetid]" />
                <param name="widgetTags" value="$PARAM[widgetTags]" />
                <param name="multiRows" value="$PARAM[multiRows]" />
            </include>
            <include content="widget_base_content_$PARAM[contentStyle]">
                <param name="widgetid" value="$PARAM[widgetid]" />
                <param name="submenuid" value="$PARAM[submenuid]" />
                <param name="widgetTarget" value="$PARAM[widgetTarget]" />
                <param name="widgetPath" value="$PARAM[widgetPath]" />
            </include>
            <visible>String.IsEqual(Container(300).ListItem.Property(submenuVisibility),$PARAM[submenuid]) | Skin.HasSetting(ShowAllWidgets)</visible>
            <visible>$PARAM[visibility]</visible>
        </control>
    </include>
    <include name="widget_base_vertical">
        <width>102%</width>
        <orientation>vertical</orientation>
    </include>
    
    <include name="widget_base_content_normal">
        <content target="$PARAM[widgetTarget]">$PARAM[widgetPath]</content>
    </include>
    <include name="widget_base_content_refresh">
        <content target="$PARAM[widgetTarget]">$VAR[$PARAM[widgetid]-refresh]</content>
    </include>
    <include name="widget_base_content_submenu">
        <content><include>skinshortcuts-group-$PARAM[submenuid]</include></content>
    </include>
    <include name="widget_base_content_weather">
        <content><include>StaticWidget_Weather</include></content>
    </include>
    <include name="widget_base_content_systeminfo">
        <content><include>StaticWidget_SystemInfo</include></content>
    </include>
    <include name="widget_base_content_rcb">
        <content><include>StaticWidget_RCB</include></content>
    </include>
    
    <variable name="focusWidget">
        <!-- workaround to focus the first widget -->
        <value condition="Control.IsVisible(1510) + Integer.IsGreater(Container(1510).NumItems,0)">SetFocus(1510)</value>
        <value condition="Control.IsVisible(1520) + Integer.IsGreater(Container(1520).NumItems,0)">SetFocus(1520)</value>
        <value condition="Control.IsVisible(1530) + Integer.IsGreater(Container(1530).NumItems,0)">SetFocus(1530)</value>
        <value condition="Control.IsVisible(1540) + Integer.IsGreater(Container(1540).NumItems,0)">SetFocus(1540)</value>
        <value condition="Control.IsVisible(1550) + Integer.IsGreater(Container(1550).NumItems,0)">SetFocus(1550)</value>
        <value condition="Control.IsVisible(1560) + Integer.IsGreater(Container(1560).NumItems,0)">SetFocus(1560)</value>
        <value condition="Control.IsVisible(1570) + Integer.IsGreater(Container(1570).NumItems,0)">SetFocus(1570)</value>
        <value condition="Control.IsVisible(1580) + Integer.IsGreater(Container(1580).NumItems,0)">SetFocus(1580)</value>
        <value condition="Control.IsVisible(1590) + Integer.IsGreater(Container(1590).NumItems,0)">SetFocus(1590)</value>
        <value condition="Control.IsVisible(1600) + Integer.IsGreater(Container(1600).NumItems,0)">SetFocus(1600)</value>
        <value condition="Control.IsVisible(2510) + Integer.IsGreater(Container(2510).NumItems,0)">SetFocus(2510)</value>
        <value condition="Control.IsVisible(2520) + Integer.IsGreater(Container(2520).NumItems,0)">SetFocus(2520)</value>
        <value condition="Control.IsVisible(2530) + Integer.IsGreater(Container(2530).NumItems,0)">SetFocus(2530)</value>
        <value condition="Control.IsVisible(2540) + Integer.IsGreater(Container(2540).NumItems,0)">SetFocus(2540)</value>
        <value condition="Control.IsVisible(2550) + Integer.IsGreater(Container(2550).NumItems,0)">SetFocus(2550)</value>
        <value condition="Control.IsVisible(2560) + Integer.IsGreater(Container(2560).NumItems,0)">SetFocus(2560)</value>
        <value condition="Control.IsVisible(2570) + Integer.IsGreater(Container(2570).NumItems,0)">SetFocus(2570)</value>
        <value condition="Control.IsVisible(2580) + Integer.IsGreater(Container(2580).NumItems,0)">SetFocus(2580)</value>
        <value condition="Control.IsVisible(2590) + Integer.IsGreater(Container(2590).NumItems,0)">SetFocus(2590)</value>
        <value condition="Control.IsVisible(2600) + Integer.IsGreater(Container(2600).NumItems,0)">SetFocus(2600)</value>
        <value condition="Control.IsVisible(3510) + Integer.IsGreater(Container(3510).NumItems,0)">SetFocus(3510)</value>
        <value condition="Control.IsVisible(3520) + Integer.IsGreater(Container(3520).NumItems,0)">SetFocus(3520)</value>
        <value condition="Control.IsVisible(3530) + Integer.IsGreater(Container(3530).NumItems,0)">SetFocus(3530)</value>
        <value condition="Control.IsVisible(3540) + Integer.IsGreater(Container(3540).NumItems,0)">SetFocus(3540)</value>
        <value condition="Control.IsVisible(3550) + Integer.IsGreater(Container(3550).NumItems,0)">SetFocus(3550)</value>
        <value condition="Control.IsVisible(3560) + Integer.IsGreater(Container(3560).NumItems,0)">SetFocus(3560)</value>
        <value condition="Control.IsVisible(3570) + Integer.IsGreater(Container(3570).NumItems,0)">SetFocus(3570)</value>
        <value condition="Control.IsVisible(3580) + Integer.IsGreater(Container(3580).NumItems,0)">SetFocus(3580)</value>
        <value condition="Control.IsVisible(3590) + Integer.IsGreater(Container(3590).NumItems,0)">SetFocus(3590)</value>
        <value condition="Control.IsVisible(3600) + Integer.IsGreater(Container(3600).NumItems,0)">SetFocus(3600)</value>
        <value condition="Control.IsVisible(4510) + Integer.IsGreater(Container(4510).NumItems,0)">SetFocus(4510)</value>
        <value condition="Control.IsVisible(4520) + Integer.IsGreater(Container(4520).NumItems,0)">SetFocus(4520)</value>
        <value condition="Control.IsVisible(4530) + Integer.IsGreater(Container(4530).NumItems,0)">SetFocus(4530)</value>
        <value condition="Control.IsVisible(4540) + Integer.IsGreater(Container(4540).NumItems,0)">SetFocus(4540)</value>
        <value condition="Control.IsVisible(4550) + Integer.IsGreater(Container(4550).NumItems,0)">SetFocus(4550)</value>
        <value condition="Control.IsVisible(4560) + Integer.IsGreater(Container(4560).NumItems,0)">SetFocus(4560)</value>
        <value condition="Control.IsVisible(4570) + Integer.IsGreater(Container(4570).NumItems,0)">SetFocus(4570)</value>
        <value condition="Control.IsVisible(4580) + Integer.IsGreater(Container(4580).NumItems,0)">SetFocus(4580)</value>
        <value condition="Control.IsVisible(4590) + Integer.IsGreater(Container(4590).NumItems,0)">SetFocus(4590)</value>
        <value condition="Control.IsVisible(4600) + Integer.IsGreater(Container(4600).NumItems,0)">SetFocus(4600)</value>
        <value condition="Control.IsVisible(5510) + Integer.IsGreater(Container(5510).NumItems,0)">SetFocus(5510)</value>
        <value condition="Control.IsVisible(5520) + Integer.IsGreater(Container(5520).NumItems,0)">SetFocus(5520)</value>
        <value condition="Control.IsVisible(5530) + Integer.IsGreater(Container(5530).NumItems,0)">SetFocus(5530)</value>
        <value condition="Control.IsVisible(5540) + Integer.IsGreater(Container(5540).NumItems,0)">SetFocus(5540)</value>
        <value condition="Control.IsVisible(5550) + Integer.IsGreater(Container(5550).NumItems,0)">SetFocus(5550)</value>
        <value condition="Control.IsVisible(5560) + Integer.IsGreater(Container(5560).NumItems,0)">SetFocus(5560)</value>
        <value condition="Control.IsVisible(5570) + Integer.IsGreater(Container(5570).NumItems,0)">SetFocus(5570)</value>
        <value condition="Control.IsVisible(5580) + Integer.IsGreater(Container(5580).NumItems,0)">SetFocus(5580)</value>
        <value condition="Control.IsVisible(5590) + Integer.IsGreater(Container(5590).NumItems,0)">SetFocus(5590)</value>
        <value condition="Control.IsVisible(5600) + Integer.IsGreater(Container(5600).NumItems,0)">SetFocus(5600)</value>
        <value condition="Control.IsVisible(6510) + Integer.IsGreater(Container(6510).NumItems,0)">SetFocus(6510)</value>
        <value condition="Control.IsVisible(6520) + Integer.IsGreater(Container(6520).NumItems,0)">SetFocus(6520)</value>
        <value condition="Control.IsVisible(6530) + Integer.IsGreater(Container(6530).NumItems,0)">SetFocus(6530)</value>
        <value condition="Control.IsVisible(6540) + Integer.IsGreater(Container(6540).NumItems,0)">SetFocus(6540)</value>
        <value condition="Control.IsVisible(6550) + Integer.IsGreater(Container(6550).NumItems,0)">SetFocus(6550)</value>
        <value condition="Control.IsVisible(6560) + Integer.IsGreater(Container(6560).NumItems,0)">SetFocus(6560)</value>
        <value condition="Control.IsVisible(6570) + Integer.IsGreater(Container(6570).NumItems,0)">SetFocus(6570)</value>
        <value condition="Control.IsVisible(6580) + Integer.IsGreater(Container(6580).NumItems,0)">SetFocus(6580)</value>
        <value condition="Control.IsVisible(6590) + Integer.IsGreater(Container(6590).NumItems,0)">SetFocus(6590)</value>
        <value condition="Control.IsVisible(6600) + Integer.IsGreater(Container(6600).NumItems,0)">SetFocus(6600)</value>
        <value condition="Control.IsVisible(7510) + Integer.IsGreater(Container(7510).NumItems,0)">SetFocus(7510)</value>
        <value condition="Control.IsVisible(7520) + Integer.IsGreater(Container(7520).NumItems,0)">SetFocus(7520)</value>
        <value condition="Control.IsVisible(7530) + Integer.IsGreater(Container(7530).NumItems,0)">SetFocus(7530)</value>
        <value condition="Control.IsVisible(7540) + Integer.IsGreater(Container(7540).NumItems,0)">SetFocus(7540)</value>
        <value condition="Control.IsVisible(7550) + Integer.IsGreater(Container(7550).NumItems,0)">SetFocus(7550)</value>
        <value condition="Control.IsVisible(7560) + Integer.IsGreater(Container(7560).NumItems,0)">SetFocus(7560)</value>
        <value condition="Control.IsVisible(7570) + Integer.IsGreater(Container(7570).NumItems,0)">SetFocus(7570)</value>
        <value condition="Control.IsVisible(7580) + Integer.IsGreater(Container(7580).NumItems,0)">SetFocus(7580)</value>
        <value condition="Control.IsVisible(7590) + Integer.IsGreater(Container(7590).NumItems,0)">SetFocus(7590)</value>
        <value condition="Control.IsVisible(7600) + Integer.IsGreater(Container(7600).NumItems,0)">SetFocus(7600)</value>
        <value condition="Control.IsVisible(8510) + Integer.IsGreater(Container(8510).NumItems,0)">SetFocus(8510)</value>
        <value condition="Control.IsVisible(8520) + Integer.IsGreater(Container(8520).NumItems,0)">SetFocus(8520)</value>
        <value condition="Control.IsVisible(8530) + Integer.IsGreater(Container(8530).NumItems,0)">SetFocus(8530)</value>
        <value condition="Control.IsVisible(8540) + Integer.IsGreater(Container(8540).NumItems,0)">SetFocus(8540)</value>
        <value condition="Control.IsVisible(8550) + Integer.IsGreater(Container(8550).NumItems,0)">SetFocus(8550)</value>
        <value condition="Control.IsVisible(8560) + Integer.IsGreater(Container(8560).NumItems,0)">SetFocus(8560)</value>
        <value condition="Control.IsVisible(8570) + Integer.IsGreater(Container(8570).NumItems,0)">SetFocus(8570)</value>
        <value condition="Control.IsVisible(8580) + Integer.IsGreater(Container(8580).NumItems,0)">SetFocus(8580)</value>
        <value condition="Control.IsVisible(8590) + Integer.IsGreater(Container(8590).NumItems,0)">SetFocus(8590)</value>
        <value condition="Control.IsVisible(8600) + Integer.IsGreater(Container(8600).NumItems,0)">SetFocus(8600)</value>
        <value condition="Control.IsVisible(9510) + Integer.IsGreater(Container(9510).NumItems,0)">SetFocus(9510)</value>
        <value condition="Control.IsVisible(9520) + Integer.IsGreater(Container(9520).NumItems,0)">SetFocus(9520)</value>
        <value condition="Control.IsVisible(9530) + Integer.IsGreater(Container(9530).NumItems,0)">SetFocus(9530)</value>
        <value condition="Control.IsVisible(9540) + Integer.IsGreater(Container(9540).NumItems,0)">SetFocus(9540)</value>
        <value condition="Control.IsVisible(9550) + Integer.IsGreater(Container(9550).NumItems,0)">SetFocus(9550)</value>
        <value condition="Control.IsVisible(9560) + Integer.IsGreater(Container(9560).NumItems,0)">SetFocus(9560)</value>
        <value condition="Control.IsVisible(9570) + Integer.IsGreater(Container(9570).NumItems,0)">SetFocus(9570)</value>
        <value condition="Control.IsVisible(9580) + Integer.IsGreater(Container(9580).NumItems,0)">SetFocus(9580)</value>
        <value condition="Control.IsVisible(9590) + Integer.IsGreater(Container(9590).NumItems,0)">SetFocus(9590)</value>
        <value condition="Control.IsVisible(9600) + Integer.IsGreater(Container(9600).NumItems,0)">SetFocus(9600)</value>
        <value condition="Control.IsVisible(10510) + Integer.IsGreater(Container(10510).NumItems,0)">SetFocus(10510)</value>
        <value condition="Control.IsVisible(10520) + Integer.IsGreater(Container(10520).NumItems,0)">SetFocus(10520)</value>
        <value condition="Control.IsVisible(10530) + Integer.IsGreater(Container(10530).NumItems,0)">SetFocus(10530)</value>
        <value condition="Control.IsVisible(10540) + Integer.IsGreater(Container(10540).NumItems,0)">SetFocus(10540)</value>
        <value condition="Control.IsVisible(10550) + Integer.IsGreater(Container(10550).NumItems,0)">SetFocus(10550)</value>
        <value condition="Control.IsVisible(10560) + Integer.IsGreater(Container(10560).NumItems,0)">SetFocus(10560)</value>
        <value condition="Control.IsVisible(10570) + Integer.IsGreater(Container(10570).NumItems,0)">SetFocus(10570)</value>
        <value condition="Control.IsVisible(10580) + Integer.IsGreater(Container(10580).NumItems,0)">SetFocus(10580)</value>
        <value condition="Control.IsVisible(10590) + Integer.IsGreater(Container(10590).NumItems,0)">SetFocus(10590)</value>
        <value condition="Control.IsVisible(10600) + Integer.IsGreater(Container(10600).NumItems,0)">SetFocus(10600)</value>
        <value>SetFocus(77777)</value>
    </variable>

    <include name="StaticWidget_SystemInfo">
        <!--systeminfo widgets -->
        <item>
            <label>$LOCALIZE[155]</label>
            <label2>[CR]$INFO[System.UsedSpacePercent]</label2>
            <thumb>resource://resource.images.skinicons.wide/disk2.png</thumb>
            <property name="poster">resource://resource.images.skinicons.wide/disk_poster.png</property>
            <property name="DBTYPE">systeminfo</property>
            <property name="fanart">resource://resource.images.skinbackgrounds.titanium/settings.jpg</property>
            <property name="plot">[CR]$INFO[System.TotalSpace] • $INFO[System.UsedSpace][CR]$INFO[System.HddTemperature]</property>
            <onclick>ActivateWindow(systeminfo)</onclick>
        </item>
        <item>
            <label>$LOCALIZE[13271]</label>
            <label2>[CR]$INFO[System.CpuUsage] • $INFO[System.CpuFrequency]</label2>
            <thumb>resource://resource.images.skinicons.wide/cpu2.png</thumb>
            <property name="poster">resource://resource.images.skinicons.wide/cpu_poster.png</property>
            <property name="DBTYPE">systeminfo</property>
            <property name="fanart">resource://resource.images.skinbackgrounds.titanium/cpu.jpg</property>
            <property name="plot">[CR]$LOCALIZE[401]: $INFO[System.CPUTemperature] • $LOCALIZE[13300]: $INFO[System.FanSpeed][CR]$LOCALIZE[12390]: $INFO[System.Uptime]</property>
            <onclick>ActivateWindow(systeminfo)</onclick>
        </item>
        <item>
            <label>$LOCALIZE[31257]</label>
            <label2>[CR]$INFO[System.Memory(used.percent)]</label2>
            <thumb>resource://resource.images.skinicons.wide/memory2.png</thumb>
            <property name="poster">resource://resource.images.skinicons.wide/memory_poster.png</property>
            <property name="DBTYPE">systeminfo</property>
            <property name="fanart">resource://resource.images.skinbackgrounds.titanium/memory.jpg</property>
            <property name="plot">[CR]$LOCALIZE[22012]: $INFO[System.Memory(total)] • $LOCALIZE[158]: $INFO[System.Memory(free)]</property>
            <onclick>ActivateWindow(systeminfo)</onclick>
        </item>
        <item>
            <label>$LOCALIZE[1006]</label>
            <label2>[CR]$INFO[Network.IPAddress]</label2>
            <thumb>resource://resource.images.skinicons.wide/network2.png</thumb>
            <property name="poster">resource://resource.images.skinicons.wide/network_poster.png</property>
            <property name="DBTYPE">systeminfo</property>
            <property name="fanart">resource://resource.images.skinbackgrounds.titanium/networking.jpg</property>
            <property name="plot">$INFO[Network.LinkState][CR]$LOCALIZE[443]: $INFO[System.InternetState]</property>
            <visible>System.HasNetwork</visible>
            <onclick>ActivateWindow(systeminfo)</onclick>
        </item>
        <item>
            <label>$LOCALIZE[1006]</label>
            <label2>[CR][COLOR red]$LOCALIZE[221][/COLOR]</label2>
            <thumb>resource://resource.images.skinicons.wide/network-down.png</thumb>
            <property name="poster">resource://resource.images.skinicons.wide/network_poster_down.png</property>
            <property name="DBTYPE">systeminfo</property>
            <property name="fanart">resource://resource.images.skinbackgrounds.titanium/networking-down.jpg</property>
            <property name="plot">[COLOR red]$INFO[Network.LinkState][CR]$LOCALIZE[443]: $INFO[System.InternetState][/COLOR]</property>
            <visible>!System.HasNetwork</visible>
            <onclick>ActivateWindow(systeminfo)</onclick>
        </item>
        <item>
            <label>$LOCALIZE[131]</label>
            <label2>[CR]$INFO[System.ScreenWidth]x$INFO[System.ScreenHeight]</label2>
            <thumb>resource://resource.images.skinicons.wide/display2.png</thumb>
            <property name="poster">resource://resource.images.skinicons.wide/display_poster.png</property>
            <property name="DBTYPE">systeminfo</property>
            <property name="fanart">resource://resource.images.skinbackgrounds.titanium/display.jpg</property>
            <property name="plot">[CR]$INFO[System.ScreenResolution]</property>
            <onclick>ActivateWindow(systeminfo)</onclick>
        </item>
        <item>
            <label>$LOCALIZE[12395]</label>
            <label2>[CR][COLOR green]$INFO[System.BatteryLevel][/COLOR]</label2>
            <thumb>resource://resource.images.skinicons.wide/battery_good.png</thumb>
            <property name="poster">resource://resource.images.skinicons.wide/battery_good_poster.png</property>
            <property name="DBTYPE">systeminfo</property>
            <property name="fanart">resource://resource.images.skinbackgrounds.titanium/battery_good.jpg</property>
            <property name="plot">[CR][COLOR green]$LOCALIZE[12395]: $LOCALIZE[12321][/COLOR]</property>
            <visible>Integer.IsGreater(System.BatteryLevel,60)</visible>
            <visible>Skin.HasSetting(SysInfoWidgetShowBattery)</visible>
            <onclick>ActivateWindow(systeminfo)</onclick>
        </item>
        <item>
            <label>$LOCALIZE[12395]</label>
            <label2>[CR][COLOR yellow]$INFO[System.BatteryLevel][/COLOR]</label2>
            <thumb>resource://resource.images.skinicons.wide/battery_low.png</thumb>
            <property name="poster">resource://resource.images.skinicons.wide/battery_low_poster.png</property>
            <property name="DBTYPE">systeminfo</property>
            <property name="fanart">resource://resource.images.skinbackgrounds.titanium/battery_low.jpg</property>
            <property name="plot">[CR][COLOR yellow]$LOCALIZE[13050][/COLOR]</property>
            <visible>Integer.IsGreater(System.BatteryLevel,20) + !Integer.IsGreater(System.BatteryLevel,60)</visible>
            <visible>Skin.HasSetting(SysInfoWidgetShowBattery)</visible>
            <onclick>ActivateWindow(systeminfo)</onclick>
        </item>
        <item>
            <label>$LOCALIZE[12395]</label>
            <label2>[CR][COLOR red]$INFO[System.BatteryLevel][/COLOR]</label2>
            <thumb>resource://resource.images.skinicons.wide/battery_critical.png</thumb>
            <property name="poster">resource://resource.images.skinicons.wide/battery_critical_poster.png</property>
            <property name="DBTYPE">systeminfo</property>
            <property name="fanart">resource://resource.images.skinbackgrounds.titanium/battery_critical.jpg</property>
            <property name="plot">[CR][COLOR red]$LOCALIZE[13050][/COLOR]</property>
            <visible>!Integer.IsGreater(System.BatteryLevel,20)</visible>
            <visible>Skin.HasSetting(SysInfoWidgetShowBattery)</visible>
            <onclick>ActivateWindow(systeminfo)</onclick>
        </item>
    </include>
    <include name="StaticWidget_Weather">
        <!--weather widgets -->
        <item>
            <label>[UPPERCASE]$INFO[Window(Weather).Property(Day0.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Weather).Property(Day0.HighTemp)] $INFO[System.TemperatureUnits] / $INFO[Window(Weather).Property(Day0.LowTemp)] $INFO[System.TemperatureUnits]</label2>
            <property name="fanart">$VAR[WeatherFanArtSingleImage_Day0]</property>
            <thumb>$VAR[WeatherIconSingleImage_Day0]</thumb>
            <property name="DBTYPE">weather</property>
            <property name="logo">$INFO[Window(Weather).Property(WeatherProviderLogo)]</property>
            <property name="plot">$INFO[Window(Weather).Property(Day0.Outlook)]</property>
            <onclick>ActivateWindow(weather)</onclick>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Weather).Property(Day1.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Weather).Property(Day1.HighTemp)] $INFO[System.TemperatureUnits] / $INFO[Window(Weather).Property(Day1.LowTemp)] $INFO[System.TemperatureUnits]</label2>
            <property name="fanart">$VAR[WeatherFanArtSingleImage_Day1]</property>
            <thumb>$VAR[WeatherIconSingleImage_Day1]</thumb>
            <property name="DBTYPE">weather</property>
            <property name="logo">$INFO[Window(Weather).Property(WeatherProviderLogo)]</property>
            <property name="plot">$INFO[Window(Weather).Property(Day1.Outlook)]</property>
            <onclick>ActivateWindow(weather)</onclick>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Weather).Property(Day2.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Weather).Property(Day2.HighTemp)] $INFO[System.TemperatureUnits] / $INFO[Window(Weather).Property(Day2.LowTemp)] $INFO[System.TemperatureUnits]</label2>
            <property name="fanart">$VAR[WeatherFanArtSingleImage_Day2]</property>
            <thumb>$VAR[WeatherIconSingleImage_Day2]</thumb>
            <property name="DBTYPE">weather</property>
            <property name="logo">$INFO[Window(Weather).Property(WeatherProviderLogo)]</property>
            <property name="plot">$INFO[Window(Weather).Property(Day2.Outlook)]</property>
            <onclick>ActivateWindow(weather)</onclick>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Weather).Property(Day3.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Weather).Property(Day3.HighTemp)] $INFO[System.TemperatureUnits] / $INFO[Window(Weather).Property(Day3.LowTemp)] $INFO[System.TemperatureUnits]</label2>
            <property name="fanart">$VAR[WeatherFanArtSingleImage_Day3]</property>
            <thumb>$VAR[WeatherIconSingleImage_Day3]</thumb>
            <property name="DBTYPE">weather</property>
            <property name="logo">$INFO[Window(Weather).Property(WeatherProviderLogo)]</property>
            <property name="plot">$INFO[Window(Weather).Property(Day3.Outlook)]</property>
            <onclick>ActivateWindow(weather)</onclick>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Weather).Property(Day4.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Weather).Property(Day4.HighTemp)] $INFO[System.TemperatureUnits] / $INFO[Window(Weather).Property(Day4.LowTemp)] $INFO[System.TemperatureUnits]</label2>
            <property name="fanart">$VAR[WeatherFanArtSingleImage_Day4]</property>
            <thumb>$VAR[WeatherIconSingleImage_Day4]</thumb>
            <property name="DBTYPE">weather</property>
            <property name="logo">$INFO[Window(Weather).Property(WeatherProviderLogo)]</property>
            <property name="plot">$INFO[Window(Weather).Property(Day4.Outlook)]</property>
            <onclick>ActivateWindow(weather)</onclick>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Weather).Property(Day5.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Weather).Property(Day5.HighTemp)] $INFO[System.TemperatureUnits] / $INFO[Window(Weather).Property(Day5.LowTemp)] $INFO[System.TemperatureUnits]</label2>
            <property name="fanart">$VAR[WeatherFanArtSingleImage_Day5]</property>
            <thumb>$VAR[WeatherIconSingleImage_Day5]</thumb>
            <property name="logo">$INFO[Window(Weather).Property(WeatherProviderLogo)]</property>
            <property name="plot">$INFO[Window(Weather).Property(Day5.Outlook)]</property>
            <onclick>ActivateWindow(weather)</onclick>
            <property name="DBTYPE">weather</property>
            <visible>!String.IsEmpty(Window(Weather).Property(Day5.Title))</visible>
            <visible>![Skin.String(widgetstyle, poster) + String.Contains(Skin.String(HomeLayout),ver)]</visible>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Weather).Property(Day6.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Weather).Property(Day6.HighTemp)] $INFO[System.TemperatureUnits] / $INFO[Window(Weather).Property(Day6.LowTemp)] $INFO[System.TemperatureUnits]</label2>
            <property name="fanart">$VAR[WeatherFanArtSingleImage_Day6]</property>
            <thumb>$VAR[WeatherIconSingleImage_Day6]</thumb>
            <property name="DBTYPE">weather</property>
            <property name="logo">$INFO[Window(Weather).Property(WeatherProviderLogo)]</property>
            <property name="plot">$INFO[Window(Weather).Property(Day6.Outlook)]</property>
            <onclick>ActivateWindow(weather)</onclick>
            <visible>!String.IsEmpty(Window(Weather).Property(Day6.Title))</visible>
            <visible>![Skin.String(widgetstyle, poster) + String.Contains(Skin.String(HomeLayout),ver)]</visible>
        </item>
    </include>
    <include name="StaticWidget_RCB">
        <!--rom collection browser -->
        <item>
            <label>[UPPERCASE]$INFO[Window(Home).Property(MostPlayedROM.1.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Home).Property(MostPlayedROM.1.Console)]</label2>
            <property name="fanart">$INFO[Window(Home).Property(MostPlayedROM.1.Fanart)]</property>
            <thumb>$INFO[Window(Home).Property(MostPlayedROM.1.Thumb)]</thumb>
            <property name="poster">$INFO[Window(Home).Property(MostPlayedROM.1.Thumb)]</property>
            <property name="plot">$INFO[Window(Home).Property(MostPlayedROM.1.Plot)]</property>
            <onclick>$INFO[Window(Home).Property(MostPlayedROM.1.LaunchCommand)]</onclick>
            <visible>!String.IsEmpty(Window(Home).Property(MostPlayedROM.1.Title))</visible>
            <property name="DBTYPE">rcb</property>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Home).Property(MostPlayedROM.2.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Home).Property(MostPlayedROM.2.Console)]</label2>
            <property name="fanart">$INFO[Window(Home).Property(MostPlayedROM.2.Fanart)]</property>
            <thumb>$INFO[Window(Home).Property(MostPlayedROM.2.Thumb)]</thumb>
            <property name="poster">$INFO[Window(Home).Property(MostPlayedROM.2.Thumb)]</property>
            <property name="plot">$INFO[Window(Home).Property(MostPlayedROM.2.Plot)]</property>
            <onclick>$INFO[Window(Home).Property(MostPlayedROM.2.LaunchCommand)]</onclick>
            <visible>!String.IsEmpty(Window(Home).Property(MostPlayedROM.2.Title))</visible>
            <property name="DBTYPE">rcb</property>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Home).Property(MostPlayedROM.3.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Home).Property(MostPlayedROM.3.Console)]</label2>
            <property name="fanart">$INFO[Window(Home).Property(MostPlayedROM.3.Fanart)]</property>
            <thumb>$INFO[Window(Home).Property(MostPlayedROM.3.Thumb)]</thumb>
            <property name="poster">$INFO[Window(Home).Property(MostPlayedROM.3.Thumb)]</property>
            <property name="plot">$INFO[Window(Home).Property(MostPlayedROM.3.Plot)]</property>
            <onclick>$INFO[Window(Home).Property(MostPlayedROM.3.LaunchCommand)]</onclick>
            <visible>!String.IsEmpty(Window(Home).Property(MostPlayedROM.3.Title))</visible>
            <property name="DBTYPE">rcb</property>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Home).Property(MostPlayedROM.4.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Home).Property(MostPlayedROM.4.Console)]</label2>
            <property name="fanart">$INFO[Window(Home).Property(MostPlayedROM.4.Fanart)]</property>
            <thumb>$INFO[Window(Home).Property(MostPlayedROM.4.Thumb)]</thumb>
            <property name="poster">$INFO[Window(Home).Property(MostPlayedROM.4.Thumb)]</property>
            <property name="plot">$INFO[Window(Home).Property(MostPlayedROM.4.Plot)]</property>
            <onclick>$INFO[Window(Home).Property(MostPlayedROM.4.LaunchCommand)]</onclick>
            <visible>!String.IsEmpty(Window(Home).Property(MostPlayedROM.4.Title))</visible>
            <property name="DBTYPE">rcb</property>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Home).Property(MostPlayedROM.5.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Home).Property(MostPlayedROM.5.Console)]</label2>
            <property name="fanart">$INFO[Window(Home).Property(MostPlayedROM.5.Fanart)]</property>
            <thumb>$INFO[Window(Home).Property(MostPlayedROM.5.Thumb)]</thumb>
            <property name="poster">$INFO[Window(Home).Property(MostPlayedROM.5.Thumb)]</property>
            <property name="plot">$INFO[Window(Home).Property(MostPlayedROM.5.Plot)]</property>
            <onclick>$INFO[Window(Home).Property(MostPlayedROM.5.LaunchCommand)]</onclick>
            <visible>!String.IsEmpty(Window(Home).Property(MostPlayedROM.5.Title))</visible>
            <property name="DBTYPE">rcb</property>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Home).Property(MostPlayedROM.6.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Home).Property(MostPlayedROM.6.Console)]</label2>
            <property name="fanart">$INFO[Window(Home).Property(MostPlayedROM.6.Fanart)]</property>
            <thumb>$INFO[Window(Home).Property(MostPlayedROM.6.Thumb)]</thumb>
            <property name="poster">$INFO[Window(Home).Property(MostPlayedROM.6.Thumb)]</property>
            <property name="plot">$INFO[Window(Home).Property(MostPlayedROM.6.Plot)]</property>
            <onclick>$INFO[Window(Home).Property(MostPlayedROM.6.LaunchCommand)]</onclick>
            <visible>!String.IsEmpty(Window(Home).Property(MostPlayedROM.6.Title))</visible>
            <property name="DBTYPE">rcb</property>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Home).Property(MostPlayedROM.7.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Home).Property(MostPlayedROM.7.Console)]</label2>
            <property name="fanart">$INFO[Window(Home).Property(MostPlayedROM.7.Fanart)]</property>
            <thumb>$INFO[Window(Home).Property(MostPlayedROM.7.Thumb)]</thumb>
            <property name="poster">$INFO[Window(Home).Property(MostPlayedROM.7.Thumb)]</property>
            <property name="plot">$INFO[Window(Home).Property(MostPlayedROM.7.Plot)]</property>
            <onclick>$INFO[Window(Home).Property(MostPlayedROM.7.LaunchCommand)]</onclick>
            <visible>!String.IsEmpty(Window(Home).Property(MostPlayedROM.7.Title))</visible>
            <property name="DBTYPE">rcb</property>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Home).Property(MostPlayedROM.8.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Home).Property(MostPlayedROM.8.Console)]</label2>
            <property name="fanart">$INFO[Window(Home).Property(MostPlayedROM.8.Fanart)]</property>
            <thumb>$INFO[Window(Home).Property(MostPlayedROM.8.Thumb)]</thumb>
            <property name="poster">$INFO[Window(Home).Property(MostPlayedROM.8.Thumb)]</property>
            <property name="plot">$INFO[Window(Home).Property(MostPlayedROM.8.Plot)]</property>
            <onclick>$INFO[Window(Home).Property(MostPlayedROM.8.LaunchCommand)]</onclick>
            <visible>!String.IsEmpty(Window(Home).Property(MostPlayedROM.8.Title))</visible>
            <property name="DBTYPE">rcb</property>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Home).Property(MostPlayedROM.9.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Home).Property(MostPlayedROM.9.Console)]</label2>
            <property name="fanart">$INFO[Window(Home).Property(MostPlayedROM.9.Fanart)]</property>
            <thumb>$INFO[Window(Home).Property(MostPlayedROM.9.Thumb)]</thumb>
            <property name="poster">$INFO[Window(Home).Property(MostPlayedROM.9.Thumb)]</property>
            <property name="plot">$INFO[Window(Home).Property(MostPlayedROM.9.Plot)]</property>
            <onclick>$INFO[Window(Home).Property(MostPlayedROM.9.LaunchCommand)]</onclick>
            <visible>!String.IsEmpty(Window(Home).Property(MostPlayedROM.9.Title))</visible>
            <property name="DBTYPE">rcb</property>
        </item>
        <item>
            <label>[UPPERCASE]$INFO[Window(Home).Property(MostPlayedROM.10.Title)][/UPPERCASE]</label>
            <label2>$INFO[Window(Home).Property(MostPlayedROM.10.Console)]</label2>
            <property name="fanart">$INFO[Window(Home).Property(MostPlayedROM.10.Fanart)]</property>
            <thumb>$INFO[Window(Home).Property(MostPlayedROM.10.Thumb)]</thumb>
            <property name="poster">$INFO[Window(Home).Property(MostPlayedROM.10.Thumb)]</property>
            <property name="plot">$INFO[Window(Home).Property(MostPlayedROM.10.Plot)]</property>
            <onclick>$INFO[Window(Home).Property(MostPlayedROM.10.LaunchCommand)]</onclick>
            <visible>!String.IsEmpty(Window(Home).Property(MostPlayedROM.10.Title))</visible>
            <property name="DBTYPE">rcb</property>
        </item>
    </include>
    
    <variable name="HomeMenuWidgetInfoLabel">
        <!-- spotlight widget-->
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + String.IsEqual(Container(1508).ListItem.Property(DBTYPE), systeminfo)">[B]$INFO[Container(1508).ListItem.label][/B] $INFO[Container(1508).ListItem.label2]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Title) + String.Contains(Container(1508).ListItem.FolderPath, pvr://)">[B]$INFO[Container(1508).ListItem.Title][/B]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Season) + !String.IsEmpty(Container(1508).ListItem.Episode) + !String.IsEqual(Container(1508).ListItem.TvShowTitle,Container(1508).ListItem.Title)">[B][UPPERCASE]S$INFO[Container(1508).ListItem.Season]E$INFO[Container(1508).ListItem.Episode]:[/UPPERCASE] $INFO[Container(1508).ListItem.Title][/B]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Title)">[B]$INFO[Container(1508).ListItem.Title][/B]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Label)">[B]$INFO[Container(1508).ListItem.Label][/B]</value>
        <!-- default -->
        <value condition="String.Contains(Container(300).ListItem.Property(widgetPath), plugin.video.youtube) + !String.IsEmpty(ListItem.Label2)">[B]$INFO[ListItem.label][CR]$INFO[ListItem.label2][/B]</value>
        <value condition="String.IsEqual(ListItem.Property(DBTYPE), systeminfo)">[B]$INFO[ListItem.label][/B] $INFO[ListItem.label2]</value>
        <value condition="!String.IsEmpty(ListItem.Title) + String.Contains(ListItem.FolderPath, pvr://)">[B]$INFO[ListItem.Title][/B]</value>
        <value condition="!String.IsEmpty(ListItem.Season) + !String.IsEmpty(ListItem.Episode) + !String.IsEqual(ListItem.TvShowTitle,ListItem.Title)">[B][UPPERCASE]S$INFO[ListItem.Season]E$INFO[ListItem.Episode]:[/UPPERCASE] $INFO[ListItem.Title][/B]</value>
        <value condition="!String.IsEmpty(ListItem.Title)">[B]$INFO[ListItem.Title][/B]</value>
        <value condition="!String.IsEmpty(ListItem.Label)">[B]$INFO[ListItem.Label][/B]</value>
        <!--widgets -->
        <value condition="String.Contains(Container(300).ListItem.Property(widgetPath), plugin.video.youtube)">[B]$INFO[Window(Home).Property(ListItem.label)][CR]$INFO[Window(Home).Property(ListItem.label2)][/B]</value>
        <value condition="String.IsEqual(Window(Home).Property(ListItem.DBTYPE), systeminfo)">[B]$INFO[Window(Home).Property(ListItem.label)][/B] $INFO[Window(Home).Property(ListItem.label2)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Title)) + String.Contains(Window(Home).Property(ListItem.FolderPath), pvr://)">[B]$INFO[Window(Home).Property(ListItem.Title)][/B]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Season)) + !String.IsEmpty(Window(Home).Property(ListItem.Episode)) + !String.IsEqual(Window(Home).Property(ListItem.TvShowTitle),Window(Home).Property(ListItem.Title))">[B][UPPERCASE]S$INFO[Window(Home).Property(ListItem.Season)]E$INFO[Window(Home).Property(ListItem.Episode)]:[/UPPERCASE] $INFO[Window(Home).Property(ListItem.Title)][/B]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Title))">[B]$INFO[Window(Home).Property(ListItem.Title)][/B]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Label))">[B]$INFO[Window(Home).Property(ListItem.Label)][/B]</value>
        <!--widgets fallback-->
        <value condition="String.Contains(Container(300).ListItem.Property(widgetPath), plugin.video.youtube)">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.label)][CR]$INFO[Window(Home).Property(SkinHelper.ListItem.label2)][/B]</value>
        <value condition="String.IsEqual(Window(Home).Property(SkinHelper.ListItem.DBTYPE), systeminfo)">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.label)][/B] $INFO[Window(Home).Property(SkinHelper.ListItem.label2)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Title)) + String.Contains(Window(Home).Property(SkinHelper.ListItem.FolderPath), pvr://)">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.Title)][/B]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Season)) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Episode)) + !String.IsEqual(Window(Home).Property(SkinHelper.ListItem.TvShowTitle),Window(Home).Property(SkinHelper.ListItem.Title))">[B][UPPERCASE]S$INFO[Window(Home).Property(SkinHelper.ListItem.Season)]E$INFO[Window(Home).Property(SkinHelper.ListItem.Episode)]:[/UPPERCASE] $INFO[Window(Home).Property(SkinHelper.ListItem.Title)][/B]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Title))">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.Title)][/B]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Label))">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.Label)][/B]</value>
    </variable>
    <variable name="HomeMenuWidgetInfoLabel2">
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Tagline))">$INFO[Window(Home).Property(ListItem.Tagline)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.TvShowTitle))">$INFO[Window(Home).Property(ListItem.TvShowTitle)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Artist))">$INFO[Window(Home).Property(ListItem.Artist)]</value>
        
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Tagline))">$INFO[Window(Home).Property(SkinHelper.ListItem.Tagline)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.TvShowTitle))">$INFO[Window(Home).Property(SkinHelper.ListItem.TvShowTitle)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Artist))">$INFO[Window(Home).Property(SkinHelper.ListItem.Artist)]</value>
    </variable>
    <variable name="HomeMenuWidgetInfoclearlogo">
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Art(clearlogo))">$INFO[Container(1508).ListItem.Art(clearlogo)]</value>

        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.ChannelLogo))">$INFO[Window(Home).Property(ListItem.ChannelLogo)]</value>
        <value condition="!String.IsEmpty(Window(home).Property(ListItem.Art.ClearLogo))">$INFO[Window(home).Property(ListItem.Art.ClearLogo)]</value>
        
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.ChannelLogo))">$INFO[Window(Home).Property(SkinHelper.ListItem.ChannelLogo)]</value>
        <value condition="!String.IsEmpty(Window(home).Property(SkinHelper.ListItem.Art.ClearLogo))">$INFO[Window(home).Property(SkinHelper.ListItem.Art.ClearLogo)]</value>
    </variable>
    <variable name="SpotLightWidgetInfoclearlogo">
        <value condition="!String.IsEmpty(ListItem.Art(tvshow.clearlogo))">$INFO[ListItem.Art(tvshow.clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(clearlogo))">$INFO[ListItem.Art(clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(ChannelLogo))">$INFO[ListItem.Property(ChannelLogo)]</value>
    </variable>
    <variable name="SpotLightWidgetInfoThumb">
        <!-- spotlight widget -->
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Art(tvshow.clearlogo))">$INFO[Container(1508).ListItem.Art(tvshow.clearlogo)]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Art(clearlogo))">$INFO[Container(1508).ListItem.Art(clearlogo)]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Art(landscape))">$INFO[Container(1508).ListItem.Art(landscape)]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Art(tvshow.landscape))">$INFO[Container(1508).ListItem.Art(tvshow.landscape)]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Art(poster))">$INFO[Container(1508).ListItem.Art(poster)]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Art(tvshow.poster))">$INFO[Container(1508).ListItem.Art(tvshow.poster)]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Property(ChannelLogo))">$INFO[Container(1508).ListItem.Property(ChannelLogo)]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Icon)">$INFO[Container(1508).ListItem.Icon]</value>
        <!-- details widget -->
        <value condition="!String.IsEmpty(ListItem.Art(tvshow.clearlogo))">$INFO[ListItem.Art(tvshow.clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(clearlogo))">$INFO[ListItem.Art(clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(landscape))">$INFO[ListItem.Art(landscape)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(tvshow.landscape))">$INFO[ListItem.Art(tvshow.landscape)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(poster))">$INFO[ListItem.Art(poster)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(tvshow.poster))">$INFO[ListItem.Art(tvshow.poster)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(ChannelLogo))">$INFO[ListItem.Property(ChannelLogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Icon)">$INFO[ListItem.Icon]</value>
        <!-- normal widgets -->
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Art.clearlogo))">$INFO[Window(Home).Property(ListItem.Art.clearlogo)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Art.landscape))">$INFO[Window(Home).Property(ListItem.Art.landscape)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Art.poster))">$INFO[Window(Home).Property(ListItem.Art.poster)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.ChannelLogo))">$INFO[Window(Home).Property(ListItem.ChannelLogo)]</value>
        <value condition="!String.IsEmpty(Window(home).Property(ListItem.Art.ChannelLogo))">$INFO[Window(home).Property(ListItem.Art.ChannelLogo)]</value>
        <!-- skinhelper fallback -->
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Art.clearlogo))">$INFO[Window(Home).Property(SkinHelper.ListItem.Art.clearlogo)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Art.landscape))">$INFO[Window(Home).Property(SkinHelper.ListItem.Art.landscape)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Art.poster))">$INFO[Window(Home).Property(SkinHelper.ListItem.Art.poster)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.ChannelLogo))">$INFO[Window(Home).Property(SkinHelper.ListItem.ChannelLogo)]</value>
        <value condition="!String.IsEmpty(Window(home).Property(SkinHelper.ListItem.Art.ChannelLogo))">$INFO[Window(home).Property(SkinHelper.ListItem.Art.ChannelLogo)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Icon))">$INFO[Window(Home).Property(SkinHelper.ListItem.Icon)]</value>
    </variable>
    <variable name="HomeMenuWidgetInfoPlot">
        <!-- spotlight widget (inside container) -->
        <value condition="!String.IsEmpty(ListItem.PlotOutline) + Skin.HasSetting(WidgetsPreferPlotOutline)">$INFO[ListItem.PlotOutline]</value>
        <value condition="!String.IsEmpty(ListItem.Plot)">$INFO[ListItem.Plot]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Plot))">$INFO[ListItem.Property(Plot)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Album_Description))">$INFO[ListItem.Property(Album_Description)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Artist_Description))">$INFO[ListItem.Property(Artist_Description)]</value>
        <value condition="!String.IsEmpty(ListItem.PictureDesc)">$INFO[ListItem.PictureDesc]</value>
        <value condition="!String.IsEmpty(ListItem.PictureComment)">$INFO[ListItem.PictureComment]</value>
        <value condition="!String.IsEmpty(ListItem.PictureKeywords)">$INFO[ListItem.PictureKeywords]</value>
        <!-- spotlight widget (outside container) -->
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.PlotOutline) + Skin.HasSetting(WidgetsPreferPlotOutline)">$INFO[Container(1508).ListItem.PlotOutline]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Plot)">$INFO[Container(1508).ListItem.Plot]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Property(Plot))">$INFO[Container(1508).ListItem.Property(Plot)]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Property(Album_Description))">$INFO[Container(1508).ListItem.Property(Album_Description)]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Property(Artist_Description))">$INFO[Container(1508).ListItem.Property(Artist_Description)]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.PictureDesc)">$INFO[Container(1508).ListItem.PictureDesc]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.PictureComment)">$INFO[Container(1508).ListItem.PictureComment]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.PictureKeywords)">$INFO[Container(1508).ListItem.PictureKeywords]</value>
        <!-- normal widgets info -->
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.PlotOutline)) + Skin.HasSetting(WidgetsPreferPlotOutline)">$INFO[Window(Home).Property(ListItem.PlotOutline)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Plot))">$INFO[Window(Home).Property(ListItem.Plot)]$INFO[Window(Home).Property(ListItem.label2),[CR]]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Album_Description))">$INFO[Window(Home).Property(ListItem.Album_Description)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Artist_Description))">$INFO[Window(Home).Property(ListItem.Artist_Description)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.PictureDesc))">$INFO[Window(Home).Property(ListItem.PictureDesc)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.PictureComment))">$INFO[Window(Home).Property(ListItem.PictureComment)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.PictureKeywords))">$INFO[Window(Home).Property(ListItem.PictureKeywords)]</value>
        <!-- skinhelper fallback-->
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.PlotOutline)) + Skin.HasSetting(WidgetsPreferPlotOutline)">$INFO[Window(Home).Property(SkinHelper.ListItem.PlotOutline)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Plot))">$INFO[Window(Home).Property(SkinHelper.ListItem.Plot)]$INFO[Window(Home).Property(SkinHelper.ListItem.label2),[CR]]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Album_Description))">$INFO[Window(Home).Property(SkinHelper.ListItem.Album_Description)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Artist_Description))">$INFO[Window(Home).Property(SkinHelper.ListItem.Artist_Description)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.PictureDesc))">$INFO[Window(Home).Property(SkinHelper.ListItem.PictureDesc)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.PictureComment))">$INFO[Window(Home).Property(SkinHelper.ListItem.PictureComment)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.PictureKeywords))">$INFO[Window(Home).Property(SkinHelper.ListItem.PictureKeywords)]</value>
    </variable>
    <variable name="HomeMenuWidgetInfoPlotAlt">
        <!-- details widget -->
        <value condition="!String.IsEmpty(ListItem.TvShowTitle)">[B]$INFO[ListItem.TvShowTitle]$INFO[ListItem.Year, • ]$INFO[ListItem.Premiered, • ]$INFO[ListItem.Genre, • ]$INFO[ListItem.Duration, • ,min.][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(ListItem.Artist) + !String.IsEmpty(ListItem.Album)">[B]$INFO[ListItem.Artist]$INFO[ListItem.Album, • ]$INFO[ListItem.Duration, • ][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(ListItem.Year)">[B]$INFO[ListItem.Year]$INFO[ListItem.Duration, • ,min.]$INFO[ListItem.Genre, • ][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(ListItem.Property(StartDateTime))">[B]$INFO[ListItem.Channel,, • ]$INFO[ListItem.Property(StartDateTime),, • ]$INFO[ListItem.Duration,, min. • ]$INFO[ListItem.Genre][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(ListItem.Property(DateTime)) + !String.IsEmpty(ListItem.Label2)">[B]$INFO[ListItem.Label2,, • ]$INFO[ListItem.Property(DateTime),, • ]$INFO[ListItem.Duration,, min. • ]$INFO[ListItem.Genre][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(ListItem.StartTime)">[B]$INFO[ListItem.Label,, • ]$INFO[ListItem.StartTime,, • ]$INFO[ListItem.Duration,, min. • ]$INFO[ListItem.Genre][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <!-- spotlight widget -->
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.TvShowTitle)">[B]$INFO[Container(1508).ListItem.TvShowTitle]$INFO[Container(1508).ListItem.Year, • ]$INFO[Container(1508).ListItem.Premiered, • ]$INFO[Container(1508).ListItem.Genre, • ]$INFO[Container(1508).ListItem.Duration, • ,min.][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Artist) + !String.IsEmpty(Container(1508).ListItem.Album)">[B]$INFO[Container(1508).ListItem.Artist]$INFO[Container(1508).ListItem.Album, • ]$INFO[Container(1508).ListItem.Duration, • ][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Year)">[B]$INFO[Container(1508).ListItem.Year]$INFO[Container(1508).ListItem.Duration, • ,min.]$INFO[Container(1508).ListItem.Genre, • ][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Property(StartDateTime))">[B]$INFO[Container(1508).ListItem.Channel,, • ]$INFO[Container(1508).ListItem.Property(StartDateTime),, • ]$INFO[Container(1508).ListItem.Duration,, min. • ]$INFO[Container(1508).ListItem.Genre][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.Property(DateTime)) + !String.IsEmpty(Container(1508).ListItem.Label2)">[B]$INFO[Container(1508).ListItem.Label2,, • ]$INFO[Container(1508).ListItem.Property(DateTime),, • ]$INFO[Container(1508).ListItem.Duration,, min. • ]$INFO[Container(1508).ListItem.Genre][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!ControlGroup(77777).HasFocus + Control.IsVisible(1508) + !String.IsEmpty(Container(1508).ListItem.StartTime)">[B]$INFO[Container(1508).ListItem.Label,, • ]$INFO[Container(1508).ListItem.StartTime,, • ]$INFO[Container(1508).ListItem.Duration,, min. • ]$INFO[Container(1508).ListItem.Genre][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <!-- normal widgets -->
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.TvShowTitle))">[B]$INFO[Window(Home).Property(ListItem.TvShowTitle),, • ]$INFO[Window(Home).Property(ListItem.Year),, • ]$INFO[Window(Home).Property(ListItem.Premiered),, • ]$INFO[Window(Home).Property(ListItem.Duration),, min. • ]$INFO[Window(Home).Property(ListItem.Genre)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Year))">[B]$INFO[Window(Home).Property(ListItem.Year),, • ]$INFO[Window(Home).Property(ListItem.Duration),, min. • ]$INFO[Window(Home).Property(ListItem.Genre)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Artist)) + !String.IsEmpty(Window(Home).Property(ListItem.Album))">[B]$INFO[Window(Home).Property(ListItem.Artist),, • ]$INFO[Window(Home).Property(ListItem.Album),, • ]$INFO[Window(Home).Property(ListItem.Duration)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.StartDateTime))">[B]$INFO[Window(Home).Property(ListItem.Label),, • ]$INFO[Window(Home).Property(ListItem.StartDateTime),, • ]$INFO[Window(Home).Property(ListItem.Duration),, min. • ]$INFO[Window(Home).Property(ListItem.Genre)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Property(DateTime))) + !String.IsEmpty(Window(Home).Property(ListItem.Label2))">[B]$INFO[Window(Home).Property(ListItem.Label2),, • ]$INFO[Window(Home).Property(ListItem.Property(DateTime)),, • ]$INFO[Window(Home).Property(ListItem.Duration),, min. • ]$INFO[Window(Home).Property(ListItem.Genre)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.StartTime))">[B]$INFO[Window(Home).Property(ListItem.Label),, • ]$INFO[Window(Home).Property(ListItem.StartTime),, • ]$INFO[Window(Home).Property(ListItem.Duration),, min. • ]$INFO[Window(Home).Property(ListItem.Genre)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <!-- skinhelper fallback -->
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.TvShowTitle))">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.TvShowTitle),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Year),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Premiered),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Duration),, min. • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Genre)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Year))">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.Year),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Duration),, min. • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Genre)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Artist)) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Album))">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.Artist),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Album),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Duration)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.StartDateTime))">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.Label),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.StartDateTime),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Duration),, min. • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Genre)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Property(DateTime))) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Label2))">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.Label2),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Property(DateTime)),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Duration),, min. • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Genre)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.StartTime))">[B]$INFO[Window(Home).Property(SkinHelper.ListItem.Label),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.StartTime),, • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Duration),, min. • ]$INFO[Window(Home).Property(SkinHelper.ListItem.Genre)][/B][CR]$VAR[HomeMenuWidgetInfoPlot]</value>
        <value>$VAR[HomeMenuWidgetInfoPlot]</value>
    </variable>
    <variable name="HomeMenuWidgetInfoPoster">
        <!-- animated poster if exists-->
        <value condition="Skin.HasSetting(SkinHelper.EnableAnimatedPosters) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Art.AnimatedPoster))">$INFO[Window(Home).Property(SkinHelper.ListItem.Art.AnimatedPoster)]</value>
        <!-- use episode thumb for episode widgets if widget style is poster -->
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Art.Thumb)) + String.Contains(Window.Property(widgetstyle),poster) + String.Contains(Window(Home).Property(ListItem.dbtype),episode)">$INFO[Window(Home).Property(ListItem.Art.Thumb)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Art.Thumb)) + String.Contains(Window.Property(widgetstyle),poster) + String.Contains(Window(Home).Property(SkinHelper.ListItem.dbtype),episode)">$INFO[Window(Home).Property(SkinHelper.ListItem.Art.Thumb)]</value>
        <!-- use thumb if widget style is square -->
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Art.Thumb)) + String.Contains(Window.Property(widgetstyle),square)">$INFO[Window(Home).Property(ListItem.Art.Thumb)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Art.Thumb)) + String.Contains(Window.Property(widgetstyle),square)">$INFO[Window(Home).Property(SkinHelper.ListItem.Art.Thumb)]</value>
        <!-- use thumb for weather widget -->
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Art(thumb))) + String.Contains(Window.Property(ListItem.DBTYPE),weather)">$INFO[Window(Home).Property(ListItem.Art(thumb))]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Art.Thumb)) + String.Contains(Window.Property(SkinHelper.ListItem.DBTYPE),weather)">$INFO[Window(Home).Property(SkinHelper.ListItem.Art.Thumb)]</value>
        <!-- use poster image if widget style is landscaped-->
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Art.Poster)) + String.Contains(Window.Property(widgetstyle),landscape)">$INFO[Window(Home).Property(ListItem.Art.Poster)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Art.Fanart))">$INFO[Window(Home).Property(ListItem.Art.Fanart)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Art.Thumb))">$INFO[Window(Home).Property(ListItem.Art.Thumb)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Icon))">$INFO[Window(Home).Property(ListItem.Icon)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Art.Poster)) + String.Contains(Window.Property(widgetstyle),landscape)">$INFO[Window(Home).Property(SkinHelper.ListItem.Art.Poster)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Art.Fanart))">$INFO[Window(Home).Property(SkinHelper.ListItem.Art.Fanart)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Art.Thumb))">$INFO[Window(Home).Property(SkinHelper.ListItem.Art.Thumb)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Icon))">$INFO[Window(Home).Property(SkinHelper.ListItem.Icon)]</value>
    </variable>
    
    <include name="WidgetTagOverlayEnable">
        <visible>true</visible>
    </include>
    <include name="WidgetTagOverlayDisable">
        <visible>false</visible>
    </include>
    <include name="WidgetTagOverlayAuto">
        <include>$PARAM[prefix]TagOverlayVisibility</include>
    </include>
    
</includes>
